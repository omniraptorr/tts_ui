{
  "SaveName": "prim",
  "GameMode": "prim",
  "Date": "1/1/2021 9:29:43 AM",
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "GameType": "",
  "GameComplexity": "",
  "Tags": [],
  "Table": "Table_Hexagon",
  "Sky": "Sky_Cathedral",
  "Note": "",
  "Rules": "",
  "Grid": {
    "Type": 0,
    "Lines": false,
    "Color": {
      "r": 0.0,
      "g": 0.0,
      "b": 0.0
    },
    "Opacity": 0.75,
    "ThickLines": false,
    "Snapping": false,
    "Offset": false,
    "BothSnapping": false,
    "xSize": 2.0,
    "ySize": 2.0,
    "PosOffset": {
      "x": 0.0,
      "y": 1.0,
      "z": 0.0
    }
  },
  "Lighting": {
    "LightIntensity": 0.54,
    "LightColor": {
      "r": 1.0,
      "g": 0.9804,
      "b": 0.8902
    },
    "AmbientIntensity": 1.3,
    "AmbientType": 0,
    "AmbientSkyColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientEquatorColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientGroundColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "ReflectionIntensity": 1.0,
    "LutIndex": 0,
    "LutContribution": 1.0
  },
  "Hands": {
    "Enable": true,
    "DisableUnused": false,
    "Hiding": 0,
    "HandTransforms": [
      {
        "Color": "Red",
        "Transform": {
          "posX": -13.64294,
          "posY": 3.570529,
          "posZ": -7.48905373,
          "rotX": 0.0,
          "rotY": 60.0000038,
          "rotZ": 0.0,
          "scaleX": 10.2694292,
          "scaleY": 6.634746,
          "scaleZ": 4.89398
        }
      },
      {
        "Color": "Yellow",
        "Transform": {
          "posX": -13.3167419,
          "posY": 3.57056427,
          "posZ": 8.302018,
          "rotX": 0.0,
          "rotY": 119.999992,
          "rotZ": 0.0,
          "scaleX": 10.2738333,
          "scaleY": 6.634746,
          "scaleZ": 4.89528
        }
      },
      {
        "Color": "Blue",
        "Transform": {
          "posX": 13.5732613,
          "posY": 3.57154942,
          "posZ": 7.74996853,
          "rotX": 1.25000986E-06,
          "rotY": 240.000031,
          "rotZ": 4.66510573E-06,
          "scaleX": 10.2710056,
          "scaleY": 6.634746,
          "scaleZ": 4.894575
        }
      },
      {
        "Color": "White",
        "Transform": {
          "posX": -0.0004248619,
          "posY": 3.57103252,
          "posZ": -15.5347919,
          "rotX": 2.5444431E-14,
          "rotY": 1.70754709E-06,
          "rotZ": -1.70754709E-06,
          "scaleX": 10.2680635,
          "scaleY": 6.634746,
          "scaleZ": 4.89394474
        }
      },
      {
        "Color": "Green",
        "Transform": {
          "posX": 0.00193071365,
          "posY": 3.57103443,
          "posZ": 15.5961761,
          "rotX": 0.0,
          "rotY": 180.0,
          "rotZ": 0.0,
          "scaleX": 10.2707872,
          "scaleY": 6.634746,
          "scaleZ": 4.89521456
        }
      },
      {
        "Color": "Pink",
        "Transform": {
          "posX": 13.6821375,
          "posY": 3.57155752,
          "posZ": -7.40821171,
          "rotX": -1.07028254E-05,
          "rotY": 299.999969,
          "rotZ": -2.536801E-05,
          "scaleX": 10.2695646,
          "scaleY": 6.634746,
          "scaleZ": 4.89325237
        }
      }
    ]
  },
  "Turns": {
    "Enable": false,
    "Type": 0,
    "TurnOrder": [],
    "Reverse": false,
    "SkipEmpty": false,
    "DisableInteractions": false,
    "PassTurns": true,
    "TurnColor": ""
  },
  "TabStates": {
    "0": {
      "title": "Rules",
      "body": "",
      "color": "Grey",
      "visibleColor": {
        "r": 0.5,
        "g": 0.5,
        "b": 0.5
      },
      "id": 0
    },
    "1": {
      "title": "White",
      "body": "",
      "color": "White",
      "visibleColor": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "id": 1
    },
    "2": {
      "title": "Brown",
      "body": "",
      "color": "Brown",
      "visibleColor": {
        "r": 0.443,
        "g": 0.231,
        "b": 0.09
      },
      "id": 2
    },
    "3": {
      "title": "Red",
      "body": "",
      "color": "Red",
      "visibleColor": {
        "r": 0.856,
        "g": 0.1,
        "b": 0.094
      },
      "id": 3
    },
    "4": {
      "title": "Orange",
      "body": "",
      "color": "Orange",
      "visibleColor": {
        "r": 0.956,
        "g": 0.392,
        "b": 0.113
      },
      "id": 4
    },
    "5": {
      "title": "Yellow",
      "body": "",
      "color": "Yellow",
      "visibleColor": {
        "r": 0.905,
        "g": 0.898,
        "b": 0.172
      },
      "id": 5
    },
    "6": {
      "title": "Green",
      "body": "",
      "color": "Green",
      "visibleColor": {
        "r": 0.192,
        "g": 0.701,
        "b": 0.168
      },
      "id": 6
    },
    "7": {
      "title": "Blue",
      "body": "",
      "color": "Blue",
      "visibleColor": {
        "r": 0.118,
        "g": 0.53,
        "b": 1.0
      },
      "id": 7
    },
    "8": {
      "title": "Teal",
      "body": "",
      "color": "Teal",
      "visibleColor": {
        "r": 0.129,
        "g": 0.694,
        "b": 0.607
      },
      "id": 8
    },
    "9": {
      "title": "Purple",
      "body": "",
      "color": "Purple",
      "visibleColor": {
        "r": 0.627,
        "g": 0.125,
        "b": 0.941
      },
      "id": 9
    },
    "10": {
      "title": "Pink",
      "body": "",
      "color": "Pink",
      "visibleColor": {
        "r": 0.96,
        "g": 0.439,
        "b": 0.807
      },
      "id": 10
    },
    "11": {
      "title": "Black",
      "body": "",
      "color": "Black",
      "visibleColor": {
        "r": 0.25,
        "g": 0.25,
        "b": 0.25
      },
      "id": 11
    }
  },
  "CameraStates": [
    {
      "Position": {
        "x": 3.41885138,
        "y": 0.9611349,
        "z": 4.004263
      },
      "Rotation": {
        "x": 90.0,
        "y": 179.7393,
        "z": 0.0
      },
      "Distance": 11.7976923,
      "Zoomed": true,
      "AbsolutePosition": {
        "x": 3.41885161,
        "y": 12.7588272,
        "z": 4.004265
      }
    },
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null
  ],
  "DecalPallet": [],
  "ObjectStates": [
    {
      "Name": "Bag",
      "Transform": {
        "posX": -9.318321,
        "posY": 0.774967134,
        "posZ": 3.77736139,
        "rotX": 1.5974889E-06,
        "rotY": -7.45050829E-06,
        "rotZ": -2.24048854E-05,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.7058823,
        "g": 0.366520882,
        "b": 0.0
      },
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "Number": 0,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "GUID": "222a81"
    },
    {
      "Name": "Deck",
      "Transform": {
        "posX": -3.14414,
        "posY": 1.10609531,
        "posZ": 2.34489155,
        "rotX": 1.97896443E-05,
        "rotY": 2.84314274E-06,
        "rotZ": 179.999985,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "deck",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "Locked": false,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "SidewaysCard": false,
      "DeckIDs": [
        3301,
        3306,
        3303,
        3310,
        3311,
        3312,
        3308,
        3308,
        3307,
        3307,
        3302,
        3302,
        3304,
        3304,
        3305,
        3305,
        3300,
        3300,
        3318,
        3317,
        3314,
        3313,
        3316,
        3315,
        3319,
        3320
      ],
      "CustomDeck": {
        "33": {
          "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
          "BackURL": "http://i.imgur.com/xpQfjRw.png",
          "NumWidth": 10,
          "NumHeight": 7,
          "BackIsHidden": false,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "Name": "Card",
          "Transform": {
            "posX": 5.81200743,
            "posY": 1.62073648,
            "posZ": -23.5393944,
            "rotX": -0.0034565595,
            "rotY": 179.9861,
            "rotZ": 0.0160957091,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Charon boosters",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "CardID": 3301,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "4137e4"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": 0.7298688,
            "posY": 1.03284931,
            "posZ": -32.1116867,
            "rotX": -0.004241235,
            "rotY": 179.9878,
            "rotZ": 0.0101105645,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Improved reactors",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "CardID": 3306,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "052b97"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": 0.6442338,
            "posY": 1.17765832,
            "posZ": -32.0914154,
            "rotX": -0.000823567971,
            "rotY": 180.0059,
            "rotZ": 0.0158268251,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Defense matrix",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "CardID": 3303,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "760450"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": -3.33590913,
            "posY": 1.03296745,
            "posZ": -31.7689476,
            "rotX": 0.00178899581,
            "rotY": 180.00708,
            "rotZ": 359.9917,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Optic flare",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "CardID": 3310,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "21ab04"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": -1.17526877,
            "posY": 1.10679793,
            "posZ": -31.6731377,
            "rotX": -0.000120283337,
            "rotY": 180.023544,
            "rotZ": 3.89745378,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Restoration",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "CardID": 3311,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "f960fc"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": 1.676821,
            "posY": 1.032931,
            "posZ": -31.55045,
            "rotX": -4.56224E-07,
            "rotY": 179.999649,
            "rotZ": 4.884684E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Scanner sweep",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "CardID": 3312,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "f0996a"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": 2.89021587,
            "posY": 1.03237247,
            "posZ": -25.06961,
            "rotX": 359.964661,
            "rotY": 179.732,
            "rotZ": 0.00318504171,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Lockdown",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "CardID": 3308,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "91c0e5"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": 2.690183,
            "posY": 1.18022871,
            "posZ": -24.90702,
            "rotX": 359.959137,
            "rotY": 180.002136,
            "rotZ": 0.09121614,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Lockdown",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "CardID": 3308,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "f35de9"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": -0.102217548,
            "posY": 1.167247,
            "posZ": -32.2608147,
            "rotX": -0.00340086943,
            "rotY": 179.988312,
            "rotZ": 352.921936,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Irradiate",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "CardID": 3307,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "87c34d"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": 1.08882856,
            "posY": 1.03290987,
            "posZ": -32.15943,
            "rotX": -0.00126387412,
            "rotY": 179.995636,
            "rotZ": -0.0004008169,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Irradiate",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "CardID": 3307,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "9433d5"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": -3.5953064,
            "posY": 1.15798843,
            "posZ": -31.5817623,
            "rotX": 359.9937,
            "rotY": 180.00473,
            "rotZ": 6.58228254,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Cloaking field",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "CardID": 3302,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "719e2a"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": -4.87423372,
            "posY": 1.03291547,
            "posZ": -31.93829,
            "rotX": -0.000715038856,
            "rotY": 179.994431,
            "rotZ": -0.000661299564,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Cloaking field",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "CardID": 3302,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "077028"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": -0.066451475,
            "posY": 1.10091686,
            "posZ": -31.8802872,
            "rotX": -1.49305888E-05,
            "rotY": 179.998688,
            "rotZ": 0.00181498984,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "EMP shockwave",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "CardID": 3304,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "30397c"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": -0.5053722,
            "posY": 1.03293061,
            "posZ": -31.36583,
            "rotX": -1.836898E-05,
            "rotY": 180.035721,
            "rotZ": -4.24982954E-06,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "EMP shockwave",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "CardID": 3304,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "0d3f42"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": 2.554428,
            "posY": 1.03293073,
            "posZ": -32.08566,
            "rotX": -1.1037896E-05,
            "rotY": 180.029663,
            "rotZ": -5.515419E-06,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Heal",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "CardID": 3305,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "fc6b40"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": 3.01282024,
            "posY": 1.082944,
            "posZ": -31.5378,
            "rotX": -9.13522963E-05,
            "rotY": 180.035553,
            "rotZ": 0.000102413775,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Heal",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "CardID": 3305,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "288bcc"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": 2.33841419,
            "posY": 1.03292036,
            "posZ": -28.6855927,
            "rotX": -0.000581410655,
            "rotY": 180.0287,
            "rotZ": -0.000136548639,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Bunker",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "CardID": 3300,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "850947"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": 6.835498,
            "posY": 1.63373,
            "posZ": -24.9155712,
            "rotX": 359.4537,
            "rotY": 179.978882,
            "rotZ": 359.993927,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Bunker",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "CardID": 3300,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "11918f"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": 12.7618465,
            "posY": 1.55209565,
            "posZ": -24.9400978,
            "rotX": 359.993225,
            "rotY": 179.977875,
            "rotZ": -8.035302E-05,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Stim packs",
          "Description": "Major: 7/4; Minor 6/5",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 3318,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "701c24"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": 12.7618465,
            "posY": 1.56174743,
            "posZ": -24.9400978,
            "rotX": 359.993256,
            "rotY": 179.976563,
            "rotZ": -7.69787E-05,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Stim packs",
          "Description": "Major: 7/3; Minor 6/5",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 3317,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "956aa3"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": 12.7618465,
            "posY": 1.57140338,
            "posZ": -24.9400978,
            "rotX": 359.993256,
            "rotY": 179.974747,
            "rotZ": -7.39232E-05,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Siege mode",
          "Description": "Major: 8/9; Minor 6/5\nGround Splash damage, Collateral damage.",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 3314,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "2d1551"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": 12.7618456,
            "posY": 1.58107817,
            "posZ": -24.940094,
            "rotX": 359.9933,
            "rotY": 180.014709,
            "rotZ": -7.797779E-05,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Siege mode",
          "Description": "Major: 9/8; Minor 6/5\nGround Splash damage, Collateral damage.",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 3313,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "48f198"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": 12.7618465,
            "posY": 1.59073687,
            "posZ": -24.9401,
            "rotX": 359.9933,
            "rotY": 179.982529,
            "rotZ": -7.28685554E-05,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Spider mines",
          "Description": "Major: 7/7; Minor 5/6\nIf none of your opponent's units in this skirmish have the Detector ability, gain Ground Splash damage.",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 3316,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "30b5df"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": 12.7618456,
            "posY": 1.60039413,
            "posZ": -24.940094,
            "rotX": 359.993317,
            "rotY": 180.014023,
            "rotZ": -7.23255362E-05,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Spider mines",
          "Description": "Major: 8/7; Minor 5/6\nIf none of your opponent's units in this skirmish have the Detector ability, gain Ground Splash damage.",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 3315,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "462b3f"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": 12.7618465,
            "posY": 1.61005318,
            "posZ": -24.9401,
            "rotX": 359.993317,
            "rotY": 179.988937,
            "rotZ": -7.065855E-05,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Yamato gun",
          "Description": "Major: 10/9; Minor 4/7",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 3319,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "1794ec"
        },
        {
          "Name": "Card",
          "Transform": {
            "posX": 12.7618456,
            "posY": 1.61971617,
            "posZ": -24.940094,
            "rotX": 359.993347,
            "rotY": 180.040466,
            "rotZ": -7.285731E-05,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Yamato gun",
          "Description": "Major: 9/9; Minor 4/7",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "Locked": false,
          "Grid": false,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 3320,
          "SidewaysCard": false,
          "CustomDeck": {
            "33": {
              "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
              "BackURL": "http://i.imgur.com/xpQfjRw.png",
              "NumWidth": 10,
              "NumHeight": 7,
              "BackIsHidden": false,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "52fa19"
        }
      ],
      "GUID": "6e575e"
    },
    {
      "Name": "Card",
      "Transform": {
        "posX": 2.01706767,
        "posY": 0.973605,
        "posZ": -1.40805185,
        "rotX": 1.10946376E-05,
        "rotY": 1.08852028E-05,
        "rotZ": -7.28633552E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "card",
      "Description": "Major: 0/6; Minor 7/4\nEnd of the Destory Units step: If your front-line unit was not destroyed, then your opponent must destroy two additional units at the end of the Splash damage step.\nReturn to your technology deck after use.",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.713235259,
        "b": 0.713235259
      },
      "Locked": false,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": true,
      "CardID": 3309,
      "SidewaysCard": false,
      "CustomDeck": {
        "33": {
          "FaceURL": "http://i.imgur.com/kUj3iQw.jpg",
          "BackURL": "http://i.imgur.com/xpQfjRw.png",
          "NumWidth": 10,
          "NumHeight": 7,
          "BackIsHidden": false,
          "UniqueBack": false,
          "Type": 0
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "GUID": "4ea443"
    },
    {
      "Name": "Chinese_Checkers_Piece",
      "Transform": {
        "posX": -5.952728,
        "posY": 1.16675782,
        "posZ": 1.74023843,
        "rotX": 357.8186,
        "rotY": 89.27621,
        "rotZ": 210.46254,
        "scaleX": 0.5,
        "scaleY": 0.5,
        "scaleZ": 0.5
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.04719937,
        "b": 0.04719937
      },
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": 1,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "GUID": "17c103"
    },
    {
      "Name": "Chinese_Checkers_Piece",
      "Transform": {
        "posX": 15.579958,
        "posY": 1.170001,
        "posZ": 1.62039733,
        "rotX": 357.8186,
        "rotY": 89.27621,
        "rotZ": 210.46254,
        "scaleX": 0.5,
        "scaleY": 0.5,
        "scaleZ": 0.5
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.713235259,
        "g": 0.04719937,
        "b": 0.04719937
      },
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": 1,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "GUID": "5b8255"
    },
    {
      "Name": "BlockSquare",
      "Transform": {
        "posX": 3.34628677,
        "posY": 1.4600004,
        "posZ": 4.289154,
        "rotX": 1.70754447E-05,
        "rotY": -6.14117744E-06,
        "rotZ": -4.02318874E-05,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "block",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.9264706,
        "g": 0.0,
        "b": 0.0
      },
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "GUID": "635247"
    },
    {
      "Name": "Custom_Token",
      "Transform": {
        "posX": 0.784503,
        "posY": 1.01000059,
        "posZ": 7.66474962,
        "rotX": -8.848736E-06,
        "rotY": 0.000127212261,
        "rotZ": 1.66441769E-05,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "tile",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "http://cloud-3.steamusercontent.com/ugc/1660099072256343933/F04094DA4D030F91CC039189C196ECCCCC5935BD/",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 15.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "GUID": "0b75fa",
      "AttachedSnapPoints": [
        {
          "Position": {
            "x": 1.506623,
            "y": 0.04999994,
            "z": 0.752410233
          }
        },
        {
          "Position": {
            "x": 1.50661516,
            "y": 0.0500000529,
            "z": 0.375751168
          }
        },
        {
          "Position": {
            "x": 1.50651848,
            "y": 0.05000004,
            "z": -0.00116944045
          }
        },
        {
          "Position": {
            "x": 1.50654817,
            "y": 0.05000003,
            "z": -0.377522528
          }
        },
        {
          "Position": {
            "x": 1.50654817,
            "y": 0.0500000231,
            "z": -0.7541528
          }
        },
        {
          "Position": {
            "x": 1.12976551,
            "y": 0.05000002,
            "z": -1.13081932
          }
        },
        {
          "Position": {
            "x": 1.12992561,
            "y": 0.05000003,
            "z": -0.754159451
          }
        },
        {
          "Position": {
            "x": 1.12991583,
            "y": 0.050000038,
            "z": -0.377514839
          }
        },
        {
          "Position": {
            "x": 1.12992024,
            "y": 0.05000005,
            "z": -0.000892761454
          }
        },
        {
          "Position": {
            "x": 1.12991488,
            "y": 0.05000006,
            "z": 0.375752151
          }
        },
        {
          "Position": {
            "x": 1.12992167,
            "y": 0.04999995,
            "z": 0.752367735
          }
        },
        {
          "Position": {
            "x": 1.129822,
            "y": 0.04999996,
            "z": 1.128656
          }
        },
        {
          "Position": {
            "x": 0.7533564,
            "y": 0.0499999747,
            "z": 1.50549078
          }
        },
        {
          "Position": {
            "x": 0.753259063,
            "y": 0.0499999672,
            "z": 1.128811
          }
        },
        {
          "Position": {
            "x": 0.7532914,
            "y": 0.049999956,
            "z": 0.7523686
          }
        },
        {
          "Position": {
            "x": 0.7532237,
            "y": 0.04999995,
            "z": 0.3753705
          }
        },
        {
          "Position": {
            "x": 0.7532863,
            "y": 0.0500000566,
            "z": -0.0008844843
          }
        },
        {
          "Position": {
            "x": 0.753289163,
            "y": 0.0500000454,
            "z": -0.3775222
          }
        },
        {
          "Position": {
            "x": 0.753306448,
            "y": 0.050000038,
            "z": -0.7541588
          }
        },
        {
          "Position": {
            "x": 0.7532563,
            "y": 0.0500000268,
            "z": -1.13105392
          }
        },
        {
          "Position": {
            "x": 0.7532562,
            "y": 0.05000002,
            "z": -1.50770843
          }
        },
        {
          "Position": {
            "x": 0.376656562,
            "y": 0.0500000268,
            "z": -1.50741184
          }
        },
        {
          "Position": {
            "x": 0.376653641,
            "y": 0.0500000343,
            "z": -1.13077366
          }
        },
        {
          "Position": {
            "x": 0.3766581,
            "y": 0.0500000454,
            "z": -0.754151642
          }
        },
        {
          "Position": {
            "x": 0.376658857,
            "y": 0.0500000529,
            "z": -0.3775214
          }
        },
        {
          "Position": {
            "x": 0.376655877,
            "y": 0.0499999449,
            "z": -0.0008836712
          }
        },
        {
          "Position": {
            "x": 0.376656562,
            "y": 0.049999956,
            "z": 0.375747263
          }
        },
        {
          "Position": {
            "x": 0.3765956,
            "y": 0.0499999635,
            "z": 0.7519768
          }
        },
        {
          "Position": {
            "x": 0.37662977,
            "y": 0.0499999747,
            "z": 1.12989032
          }
        },
        {
          "Position": {
            "x": 0.376630574,
            "y": 0.0499999821,
            "z": 1.50652039
          }
        },
        {
          "Position": {
            "x": 2.972197E-07,
            "y": 0.04999999,
            "z": 1.50652122
          }
        },
        {
          "Position": {
            "x": -4.5907052E-07,
            "y": 0.0499999821,
            "z": 1.129891
          }
        },
        {
          "Position": {
            "x": -1.25324971E-06,
            "y": 0.04999997,
            "z": 0.7532608
          }
        },
        {
          "Position": {
            "x": 0.00037861793,
            "y": 0.0499999635,
            "z": 0.376614839
          }
        },
        {
          "Position": {
            "x": 2.94185847E-05,
            "y": 0.0499999523,
            "z": -0.00089036
          }
        },
        {
          "Position": {
            "x": 3.57474237E-05,
            "y": 0.04999994,
            "z": -0.37752685
          }
        },
        {
          "Position": {
            "x": -6.83692051E-05,
            "y": 0.0500000529,
            "z": -0.7544565
          }
        },
        {
          "Position": {
            "x": 2.70739347E-05,
            "y": 0.05000004,
            "z": -1.13078117
          }
        },
        {
          "Position": {
            "x": 2.02744668E-05,
            "y": 0.0500000343,
            "z": -1.5073967
          }
        },
        {
          "Position": {
            "x": -0.376636177,
            "y": 0.05000004,
            "z": -1.50652015
          }
        },
        {
          "Position": {
            "x": -0.376635343,
            "y": 0.05000005,
            "z": -1.12988985
          }
        },
        {
          "Position": {
            "x": -0.376634628,
            "y": 0.05000006,
            "z": -0.75325954
          }
        },
        {
          "Position": {
            "x": -0.376633823,
            "y": 0.04999995,
            "z": -0.376629263
          }
        },
        {
          "Position": {
            "x": -0.376633048,
            "y": 0.04999996,
            "z": 1.00253874E-06
          }
        },
        {
          "Position": {
            "x": -0.376632273,
            "y": 0.04999997,
            "z": 0.37663123
          }
        },
        {
          "Position": {
            "x": -0.376631469,
            "y": 0.04999998,
            "z": 0.7532615
          }
        },
        {
          "Position": {
            "x": -0.376630753,
            "y": 0.04999999,
            "z": 1.12989187
          }
        },
        {
          "Position": {
            "x": -0.376629949,
            "y": 0.049999997,
            "z": 1.50652194
          }
        },
        {
          "Position": {
            "x": -0.7532603,
            "y": 0.0500000045,
            "z": 1.50652266
          }
        },
        {
          "Position": {
            "x": -0.753261,
            "y": 0.049999997,
            "z": 1.12989259
          }
        },
        {
          "Position": {
            "x": -0.7532618,
            "y": 0.0499999858,
            "z": 0.7532623
          }
        },
        {
          "Position": {
            "x": -0.75326246,
            "y": 0.04999998,
            "z": 0.376632035
          }
        },
        {
          "Position": {
            "x": -0.7532633,
            "y": 0.0499999672,
            "z": 1.77777372E-06
          }
        },
        {
          "Position": {
            "x": -0.75326407,
            "y": 0.049999956,
            "z": -0.3766285
          }
        },
        {
          "Position": {
            "x": -0.753264844,
            "y": 0.04999995,
            "z": -0.753258765
          }
        },
        {
          "Position": {
            "x": -0.7532657,
            "y": 0.0500000566,
            "z": -1.129889
          }
        },
        {
          "Position": {
            "x": -0.753266335,
            "y": 0.05000005,
            "z": -1.50651932
          }
        },
        {
          "Position": {
            "x": -1.129896,
            "y": 0.0499999449,
            "z": -1.1298883
          }
        },
        {
          "Position": {
            "x": -1.12989533,
            "y": 0.049999956,
            "z": -0.753258169
          }
        },
        {
          "Position": {
            "x": -1.12989438,
            "y": 0.0499999635,
            "z": -0.3766277
          }
        },
        {
          "Position": {
            "x": -1.12989366,
            "y": 0.0499999747,
            "z": 2.5530087E-06
          }
        },
        {
          "Position": {
            "x": -1.129893,
            "y": 0.0499999858,
            "z": 0.3766328
          }
        },
        {
          "Position": {
            "x": -1.12989211,
            "y": 0.0499999933,
            "z": 0.7532631
          }
        },
        {
          "Position": {
            "x": -1.12989128,
            "y": 0.0500000045,
            "z": 1.12989342
          }
        },
        {
          "Position": {
            "x": -1.5065223,
            "y": 0.05,
            "z": 0.753263831
          }
        },
        {
          "Position": {
            "x": -1.506523,
            "y": 0.0499999933,
            "z": 0.376633584
          }
        },
        {
          "Position": {
            "x": -1.50652373,
            "y": 0.0499999821,
            "z": 3.32824288E-06
          }
        },
        {
          "Position": {
            "x": -1.50652456,
            "y": 0.04999997,
            "z": -0.376626939
          }
        },
        {
          "Position": {
            "x": -1.50652528,
            "y": 0.0499999635,
            "z": -0.753257155
          }
        }
      ],
      "States": {
        "2": {
          "Name": "Custom_Token",
          "Transform": {
            "posX": 1.1969,
            "posY": 1.01,
            "posZ": 0.0,
            "rotX": 5.68795E-07,
            "rotY": 179.909164,
            "rotZ": -1.7349322E-07,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "Deathmatch",
          "Description": "Press 1 for Highform",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "Locked": true,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": false,
          "GridProjection": false,
          "HideWhenFaceDown": false,
          "Hands": false,
          "CustomImage": {
            "ImageURL": "http://cloud-3.steamusercontent.com/ugc/794244274628318816/07B257DFFCA98F93BC19082673AFFB1321AA0AFB/",
            "ImageSecondaryURL": "",
            "ImageScalar": 1.0,
            "WidthScale": 0.0,
            "CustomToken": {
              "Thickness": 0.1,
              "MergeDistancePixels": 15.0,
              "StandUp": false,
              "Stackable": false
            }
          },
          "LuaScript": "",
          "LuaScriptState": "",
          "XmlUI": "",
          "GUID": "f956ab",
          "AttachedSnapPoints": [
            {
              "Position": {
                "x": 1.5065167,
                "y": 0.0500000231,
                "z": -0.7532634
              }
            },
            {
              "Position": {
                "x": 1.506519,
                "y": 0.05000003,
                "z": -0.376639038
              }
            },
            {
              "Position": {
                "x": 1.50651824,
                "y": 0.05000004,
                "z": -2.8546915E-06
              }
            },
            {
              "Position": {
                "x": 1.50651908,
                "y": 0.0500000529,
                "z": 0.3766274
              }
            },
            {
              "Position": {
                "x": 1.50651979,
                "y": 0.04999994,
                "z": 0.753257632
              }
            },
            {
              "Position": {
                "x": 1.12988567,
                "y": 0.05000002,
                "z": -1.129893
              }
            },
            {
              "Position": {
                "x": 1.12988651,
                "y": 0.05000003,
                "z": -0.753262639
              }
            },
            {
              "Position": {
                "x": 1.12988877,
                "y": 0.050000038,
                "z": -0.3766383
              }
            },
            {
              "Position": {
                "x": 1.12988794,
                "y": 0.05000005,
                "z": -2.09840027E-06
              }
            },
            {
              "Position": {
                "x": 1.12988877,
                "y": 0.05000006,
                "z": 0.37662816
              }
            },
            {
              "Position": {
                "x": 1.12988949,
                "y": 0.04999995,
                "z": 0.7532584
              }
            },
            {
              "Position": {
                "x": 1.12989032,
                "y": 0.04999996,
                "z": 1.12988877
              }
            },
            {
              "Position": {
                "x": 0.7532546,
                "y": 0.05000002,
                "z": -1.50652242
              }
            },
            {
              "Position": {
                "x": 0.753255367,
                "y": 0.0500000268,
                "z": -1.12989211
              }
            },
            {
              "Position": {
                "x": 0.7532562,
                "y": 0.050000038,
                "z": -0.7532618
              }
            },
            {
              "Position": {
                "x": 0.7532584,
                "y": 0.0500000454,
                "z": -0.376637578
              }
            },
            {
              "Position": {
                "x": 0.7532577,
                "y": 0.0500000566,
                "z": -1.32316563E-06
              }
            },
            {
              "Position": {
                "x": 0.753258467,
                "y": 0.04999995,
                "z": 0.376628935
              }
            },
            {
              "Position": {
                "x": 0.753259242,
                "y": 0.049999956,
                "z": 0.753259242
              }
            },
            {
              "Position": {
                "x": 0.7532601,
                "y": 0.0499999672,
                "z": 1.12988961
              }
            },
            {
              "Position": {
                "x": 0.7532608,
                "y": 0.0499999747,
                "z": 1.50651968
              }
            },
            {
              "Position": {
                "x": 0.376630574,
                "y": 0.0499999821,
                "z": 1.50652039
              }
            },
            {
              "Position": {
                "x": 0.37662977,
                "y": 0.0499999747,
                "z": 1.12989032
              }
            },
            {
              "Position": {
                "x": 0.376629,
                "y": 0.0499999635,
                "z": 0.753259957
              }
            },
            {
              "Position": {
                "x": 0.37662822,
                "y": 0.049999956,
                "z": 0.37662974
              }
            },
            {
              "Position": {
                "x": 0.376627445,
                "y": 0.0499999449,
                "z": -5.479308E-07
              }
            },
            {
              "Position": {
                "x": 0.37662828,
                "y": 0.0500000529,
                "z": -0.376636744
              }
            },
            {
              "Position": {
                "x": 0.3766259,
                "y": 0.0500000454,
                "z": -0.753261
              }
            },
            {
              "Position": {
                "x": 0.37662515,
                "y": 0.0500000343,
                "z": -1.12989128
              }
            },
            {
              "Position": {
                "x": 0.376624346,
                "y": 0.0500000268,
                "z": -1.50652158
              }
            },
            {
              "Position": {
                "x": -5.90465925E-06,
                "y": 0.0500000343,
                "z": -1.50652087
              }
            },
            {
              "Position": {
                "x": -5.129424E-06,
                "y": 0.05000004,
                "z": -1.12989056
              }
            },
            {
              "Position": {
                "x": -4.354189E-06,
                "y": 0.0500000529,
                "z": -0.7532603
              }
            },
            {
              "Position": {
                "x": -2.02553952E-06,
                "y": 0.04999994,
                "z": -0.376635969
              }
            },
            {
              "Position": {
                "x": -2.02848446E-06,
                "y": 0.0499999635,
                "z": 0.376630485
              }
            },
            {
              "Position": {
                "x": -2.784775E-06,
                "y": 0.0499999523,
                "z": 2.27303943E-07
              }
            },
            {
              "Position": {
                "x": -1.25324982E-06,
                "y": 0.04999997,
                "z": 0.753260732
              }
            },
            {
              "Position": {
                "x": -4.780148E-07,
                "y": 0.0499999821,
                "z": 1.129891
              }
            },
            {
              "Position": {
                "x": 2.972197E-07,
                "y": 0.04999999,
                "z": 1.50652122
              }
            },
            {
              "Position": {
                "x": -0.376629949,
                "y": 0.049999997,
                "z": 1.50652194
              }
            },
            {
              "Position": {
                "x": -0.376630753,
                "y": 0.04999999,
                "z": 1.12989187
              }
            },
            {
              "Position": {
                "x": -0.3766315,
                "y": 0.04999998,
                "z": 0.7532615
              }
            },
            {
              "Position": {
                "x": -0.7532618,
                "y": 0.0499999858,
                "z": 0.7532623
              }
            },
            {
              "Position": {
                "x": -0.75326097,
                "y": 0.049999997,
                "z": 1.12989259
              }
            },
            {
              "Position": {
                "x": -0.7532602,
                "y": 0.0500000045,
                "z": 1.50652266
              }
            },
            {
              "Position": {
                "x": -1.12989128,
                "y": 0.0500000045,
                "z": 1.12989342
              }
            },
            {
              "Position": {
                "x": -1.12989211,
                "y": 0.0499999933,
                "z": 0.7532631
              }
            },
            {
              "Position": {
                "x": -1.5065223,
                "y": 0.05,
                "z": 0.753263831
              }
            },
            {
              "Position": {
                "x": -1.506523,
                "y": 0.0499999933,
                "z": 0.376633584
              }
            },
            {
              "Position": {
                "x": -1.129893,
                "y": 0.0499999858,
                "z": 0.3766328
              }
            },
            {
              "Position": {
                "x": -0.7532626,
                "y": 0.04999998,
                "z": 0.376632035
              }
            },
            {
              "Position": {
                "x": -0.3766323,
                "y": 0.04999997,
                "z": 0.37663123
              }
            },
            {
              "Position": {
                "x": -0.376633048,
                "y": 0.04999996,
                "z": 1.00253874E-06
              }
            },
            {
              "Position": {
                "x": -0.7532633,
                "y": 0.0499999672,
                "z": 1.75882951E-06
              }
            },
            {
              "Position": {
                "x": -1.12989366,
                "y": 0.0499999747,
                "z": 2.5530087E-06
              }
            },
            {
              "Position": {
                "x": -1.50652373,
                "y": 0.0499999821,
                "z": 3.3471872E-06
              }
            },
            {
              "Position": {
                "x": -1.506523,
                "y": 0.04999997,
                "z": -0.376632869
              }
            },
            {
              "Position": {
                "x": -1.129893,
                "y": 0.0499999635,
                "z": -0.376633674
              }
            },
            {
              "Position": {
                "x": -0.7532626,
                "y": 0.049999956,
                "z": -0.3766344
              }
            },
            {
              "Position": {
                "x": -0.376632333,
                "y": 0.04999995,
                "z": -0.3766352
              }
            },
            {
              "Position": {
                "x": -0.376634628,
                "y": 0.04999994,
                "z": -0.75325954
              }
            },
            {
              "Position": {
                "x": -0.376635373,
                "y": 0.05000005,
                "z": -1.12988985
              }
            },
            {
              "Position": {
                "x": -0.376636177,
                "y": 0.05000004,
                "z": -1.50652015
              }
            },
            {
              "Position": {
                "x": -0.753266454,
                "y": 0.05000005,
                "z": -1.50651932
              }
            },
            {
              "Position": {
                "x": -0.7532657,
                "y": 0.0500000566,
                "z": -1.129889
              }
            },
            {
              "Position": {
                "x": -0.753264844,
                "y": 0.04999995,
                "z": -0.753258765
              }
            },
            {
              "Position": {
                "x": -1.12989521,
                "y": 0.049999956,
                "z": -0.75325793
              }
            },
            {
              "Position": {
                "x": -1.129896,
                "y": 0.0499999449,
                "z": -1.12988818
              }
            },
            {
              "Position": {
                "x": -1.50652528,
                "y": 0.0499999635,
                "z": -0.753257155
              }
            }
          ]
        }
      }
    },
    {
      "Name": "Custom_Model_Bag",
      "Transform": {
        "posX": -6.907009,
        "posY": 3.03191352,
        "posZ": -6.319579,
        "rotX": -0.00242933049,
        "rotY": 0.0,
        "rotZ": -0.000340953877,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.9999998,
        "g": 0.992160261,
        "b": 0.9999998
      },
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "Number": 0,
      "CustomMesh": {
        "MeshURL": "http://pastebin.com/raw.php?i=10Bbjb22",
        "DiffuseURL": "http://i.imgur.com/R8wCRNk.png",
        "NormalURL": "",
        "ColliderURL": "",
        "Convex": true,
        "MaterialIndex": 1,
        "TypeIndex": 6,
        "CastShadows": true
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "GUID": "077ca6",
      "AttachedSnapPoints": [
        {
          "Position": {
            "x": -0.9188242,
            "y": 0.200000018,
            "z": -0.8658344
          },
          "Rotation": {
            "x": -6.65943935E-06,
            "y": -0.000212826344,
            "z": 0.000127719279
          }
        },
        {
          "Position": {
            "x": -2.91911674,
            "y": 0.199999988,
            "z": -0.8711437
          },
          "Rotation": {
            "x": -6.65943935E-06,
            "y": -0.000212826344,
            "z": 0.000127719279
          }
        },
        {
          "Position": {
            "x": 1.39995384,
            "y": 0.200000018,
            "z": -0.908946
          },
          "Rotation": {
            "x": -6.65943935E-06,
            "y": -0.000212826344,
            "z": 0.000127719279
          }
        },
        {
          "Position": {
            "x": 0.155027136,
            "y": 0.200000033,
            "z": -2.067841
          }
        },
        {
          "Position": {
            "x": -1.30850947,
            "y": 0.200000033,
            "z": -2.07019758
          }
        },
        {
          "Position": {
            "x": -3.1117754,
            "y": 0.200000048,
            "z": -2.27544022
          }
        },
        {
          "Position": {
            "x": -0.325699329,
            "y": 0.200000033,
            "z": 1.67690361
          },
          "Rotation": {
            "x": -6.65943935E-06,
            "y": -0.000212826344,
            "z": 0.000127719279
          }
        },
        {
          "Position": {
            "x": -0.8554082,
            "y": 0.200000048,
            "z": 1.684272
          },
          "Rotation": {
            "x": -6.65943935E-06,
            "y": -0.000212826344,
            "z": 0.000127719279
          }
        },
        {
          "Position": {
            "x": -1.38822222,
            "y": 0.200000048,
            "z": 1.67474508
          },
          "Rotation": {
            "x": -6.65943935E-06,
            "y": -0.000212826344,
            "z": 0.000127719279
          }
        },
        {
          "Position": {
            "x": -1.392407,
            "y": 0.200000018,
            "z": 2.16637444
          },
          "Rotation": {
            "x": -6.65943935E-06,
            "y": -0.000212826344,
            "z": 0.000127719279
          }
        },
        {
          "Position": {
            "x": -0.852740467,
            "y": 0.200000033,
            "z": 2.16029787
          },
          "Rotation": {
            "x": -6.65943935E-06,
            "y": -0.000212826344,
            "z": 0.000127719279
          }
        },
        {
          "Position": {
            "x": -0.3324501,
            "y": 0.199999988,
            "z": 2.15778446
          },
          "Rotation": {
            "x": -6.65943935E-06,
            "y": -0.000212826344,
            "z": 0.000127719279
          }
        },
        {
          "Position": {
            "x": -3.13755178,
            "y": 0.200071365,
            "z": 2.24753976
          },
          "Rotation": {
            "x": 1.18297412E-05,
            "y": 0.0911903158,
            "z": 180.000015
          }
        },
        {
          "Position": {
            "x": 3.14907837,
            "y": 0.1999617,
            "z": 2.237782
          },
          "Rotation": {
            "x": 1.28768158E-06,
            "y": 0.0186007842,
            "z": 3.696171E-07
          }
        }
      ]
    }
  ],
  "LuaScript": "-- Bundled by luabundle {\"rootModuleName\":\"Global.-1.lua\",\"version\":\"1.6.0\"}\nlocal __bundle_require, __bundle_loaded, __bundle_register, __bundle_modules = (function(superRequire)\n\tlocal loadingPlaceholder = {[{}] = true}\n\n\tlocal register\n\tlocal modules = {}\n\n\tlocal require\n\tlocal loaded = {}\n\n\tregister = function(name, body)\n\t\tif not modules[name] then\n\t\t\tmodules[name] = body\n\t\tend\n\tend\n\n\trequire = function(name)\n\t\tlocal loadedModule = loaded[name]\n\n\t\tif loadedModule then\n\t\t\tif loadedModule == loadingPlaceholder then\n\t\t\t\treturn nil\n\t\t\tend\n\t\telse\n\t\t\tif not modules[name] then\n\t\t\t\tif not superRequire then\n\t\t\t\t\tlocal identifier = type(name) == 'string' and '\\\"' .. name .. '\\\"' or tostring(name)\n\t\t\t\t\terror('Tried to require ' .. identifier .. ', but no such module has been registered')\n\t\t\t\telse\n\t\t\t\t\treturn superRequire(name)\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tloaded[name] = loadingPlaceholder\n\t\t\tloadedModule = modules[name](require, loaded, register, modules)\n\t\t\tloaded[name] = loadedModule\n\t\tend\n\n\t\treturn loadedModule\n\tend\n\n\treturn require, loaded, register, modules\nend)(nil)\n__bundle_register(\"Global.-1.lua\", function(require, _LOADED, __bundle_register, __bundle_modules)\nrequire(\"UIUtils/LFTest\")\nend)\n__bundle_register(\"UIUtils/LFTest\", function(require, _LOADED, __bundle_register, __bundle_modules)\n---@param guid string\r\nlocal function naive_getObject(guid)\r\n    return --[[---@not nil]] getObjectFromGUID(guid)\r\nend\r\n\r\nlocal lf = require(\"UIUtils/LabelFactory\")\r\nlocal vec2 = require(\"ge_tts/Vector2\")\r\n\r\nfunction onLoad()\r\n  local bag = naive_getObject(\"222a81\")\r\n  local card = naive_getObject(\"4ea443\")\r\n  local deck = naive_getObject(\"6e575e\")\r\n  local tile = naive_getObject(\"0b75fa\")\r\n  local cube = naive_getObject(\"635247\")\r\n  local marble = naive_getObject(\"17c103\")\r\n  local board = naive_getObject(\"077ca6\")\r\n\r\n  local testObjs = {\r\n    -- card,\r\n    -- deck,\r\n    tile,\r\n    board,\r\n    -- bag,\r\n    -- cube,\r\n  }\r\n\r\n  for _, obj in ipairs(testObjs) do\r\n    local width = 1000\r\n    print(obj.name)\r\n    local objCreateButton =  lf(--[[---@type tts__Object]] obj)\r\n    objCreateButton({\r\n        color = \"Red\",\r\n        label = \"at\\nsmaller\\nwidths\\nit\\nis\\nless\\nnoticeable\",\r\n        position = vec2{1,1},\r\n        align = vec2{-1, 0},\r\n    })\r\n    objCreateButton({\r\n        color = \"Red\",\r\n        label = \"but this longer one one overlaps a bit\",\r\n        position = vec2{1,0},\r\n        align = vec2{-1, 0},\r\n    })\r\n  end\r\nend\nend)\n__bundle_register(\"ge_tts/Vector2\", function(require, _LOADED, __bundle_register, __bundle_modules)\n---\n--- A 2D vector implementation.\n---\n--- Components can be accessed as x and y properties, or indexed by numbers [1] and [2].\n---\n---@class ge_tts__Vector2 : __ge_tts__NumCharVec2Shape<number>\n\n---@shape ge_tts__CharVec2Shape\n---@field x number\n---@field y number\n\n---@shape ge_tts__NumVec2Shape\n---@field [1] number\n---@field [2] number\n\n---@alias ge_tts__Vec2Shape ge_tts__CharVec2Shape | ge_tts__NumVec2Shape\n\n---@shape __ge_tts__NumCharVec2Shape<T>\n---@field x T\n---@field y T\n---@field [1] T\n---@field [2] T\n\n---@shape ge_tts__NumCharVec2Shape : __ge_tts__NumCharVec2Shape<number>\n\n---@param vector ge_tts__Vector2\n---@param index any\nlocal function numberedIndex(vector, index)\n    if type(index) == 'number' then\n        if index == 1 then\n            return vector.x\n        elseif index == 2 then\n            return vector.y\n        end\n\n        return nil\n    end\nend\n\nlocal RADIANS_RATIO = math.pi / 180\n\n---@class ge_tts__static_Vector2\n---@overload fun(): ge_tts__Vector2\n---@overload fun(x: number, y: number): ge_tts__Vector2\n---@overload fun(source: ge_tts__Vec2Shape): ge_tts__Vector2\nlocal Vector2 = {}\n\nsetmetatable(Vector2, {\n    ---@param sourceXOrVector nil | __ge_tts__NumCharVec2Shape<nil | number>\n    ---@param sourceY nil | number\n    __call = function(_, sourceXOrVector, sourceY)\n        local self = --[[---@type ge_tts__Vector2]] {x = 0, y = 0}\n\n        setmetatable(self, {\n            __index = numberedIndex,\n            __tostring = function(_)\n                return self.toString()\n            end,\n        })\n\n        if sourceXOrVector then\n            if type(sourceXOrVector) == 'table' then\n                local source = --[[---@type __ge_tts__NumCharVec2Shape<nil | number>]] sourceXOrVector\n\n                self.x = source.x or source[1] or self.x\n                self.y = source.y or source[2] or self.y\n            else\n                self.x = --[[---@type number]] sourceXOrVector\n                self.y = --[[---@type number]] sourceY\n            end\n        end\n\n        ---@return string\n        function self.toString()\n            return '{x = ' .. self.x .. ', y = ' .. self.y .. '}'\n        end\n\n        ---@return ge_tts__CharVec2Shape\n        function self.toData()\n            return {x = self.x, y = self.y}\n        end\n\n        ---@return number\n        function self.lengthSquared()\n            return Vector2.lengthSquared(self)\n        end\n\n        ---@return number\n        function self.length()\n            return Vector2.length(self)\n        end\n\n        ---Add a vector to self.\n        ---@overload fun(v: ge_tts__Vec2Shape): self\n        ---@param v ge_tts__NumCharVec2Shape\n        ---@return ge_tts__Vector2 @self\n        function self.add(v)\n            self.x = self.x + (v.x or v[1])\n            self.y = self.y + (v.y or v[2])\n            return self\n        end\n\n        ---Subtract a vector from self.\n        ---@overload fun(v: ge_tts__Vec2Shape): self\n        ---@param v ge_tts__NumCharVec2Shape\n        ---@return ge_tts__Vector2 @self\n        function self.sub(v)\n            self.x = self.x - (v.x or v[1])\n            self.y = self.y - (v.y or v[2])\n            return self\n        end\n\n        ---@param factor number | ge_tts__Vec2Shape\n        ---@return ge_tts__Vector2 @self\n        function self.scale(factor)\n            if (type(factor) == 'number') then\n                self.x = self.x * factor\n                self.y = self.y * factor\n            else\n                self.x = self.x * ((--[[---@type ge_tts__CharVec2Shape]] factor).x or (--[[---@type ge_tts__NumVec2Shape]] factor)[1])\n                self.y = self.y * ((--[[---@type ge_tts__CharVec2Shape]] factor).y or (--[[---@type ge_tts__NumVec2Shape]] factor)[2])\n            end\n\n            return self\n        end\n\n        ---@return ge_tts__Vector2 @self\n        function self.normalize()\n            return self.scale(1 / self.length())\n        end\n\n        ---@param angle number @angle in degrees\n        ---@return ge_tts__Vector2 @self\n        function self.rotate(angle)\n            angle = angle * RADIANS_RATIO\n            local x = self.x\n            self.x = x * math.cos(angle) - self.y * math.sin(angle)\n            self.y = x * math.sin(angle) + self.y * math.cos(angle)\n            return self\n        end\n\n        return self\n    end,\n})\n\n---@overload fun(v: ge_tts__Vec2Shape): number\n---@param v ge_tts__NumCharVec2Shape\n---@return number\nfunction Vector2.lengthSquared(v)\n    local x = v.x or v[1]\n    local y = v.y or v[2]\n    return x * x + y * y\nend\n\n---@param v ge_tts__Vec2Shape\n---@return number\nfunction Vector2.length(v)\n    return math.sqrt(Vector2.lengthSquared(v))\nend\n\n---@param v1 ge_tts__Vec2Shape\n---@param v2 ge_tts__Vec2Shape\n---@return ge_tts__Vector2\nfunction Vector2.add(v1, v2)\n    return Vector2(v1).add(v2)\nend\n\n---@param v1 ge_tts__Vec2Shape\n---@param v2 ge_tts__Vec2Shape\n---@return ge_tts__Vector2\nfunction Vector2.sub(v1, v2)\n    return Vector2(v1).sub(v2)\nend\n\n---@param v ge_tts__Vec2Shape\n---@param factor number | ge_tts__Vec2Shape\n---@return ge_tts__Vector2\nfunction Vector2.scale(v, factor)\n    return Vector2(v).scale(factor)\nend\n\n---@param v ge_tts__Vec2Shape\n---@return ge_tts__Vector2\nfunction Vector2.normalize(v)\n    return Vector2(v).normalize()\nend\n\n---@overload fun(v1: ge_tts__Vec2Shape, v2: ge_tts__Vec2Shape): number\n---@param v1 ge_tts__NumCharVec2Shape\n---@param v2 ge_tts__NumCharVec2Shape\n---@return number\nfunction Vector2.cross(v1, v2)\n    local x1 = v1.x or v1[1]\n    local y1 = v1.y or v1[2]\n\n    local x2 = v2.x or v2[1]\n    local y2 = v2.y or v2[2]\n\n    return x1 * y2 - y1 * x2\nend\n\n---@overload fun(v1: ge_tts__Vec2Shape, v2: ge_tts__Vec2Shape): number\n---@param v1 ge_tts__NumCharVec2Shape\n---@param v2 ge_tts__NumCharVec2Shape\n---@return number\nfunction Vector2.dot(v1, v2)\n    local x1 = v1.x or v1[1]\n    local y1 = v1.y or v1[2]\n\n    local x2 = v2.x or v2[1]\n    local y2 = v2.y or v2[2]\n\n    return x1 * x2 + y1 * y2\nend\n\n---@overload fun(v1: ge_tts__Vec2Shape, v2: ge_tts__Vec2Shape): number\n---@param v1 ge_tts__NumCharVec2Shape\n---@param v2 ge_tts__NumCharVec2Shape\n---@return number\nfunction Vector2.distanceSquared(v1, v2)\n    local x1 = v1.x or v1[1]\n    local y1 = v1.y or v1[2]\n\n    local x2 = v2.x or v2[1]\n    local y2 = v2.y or v2[2]\n\n    return Vector2.lengthSquared({x = x2 - x1, y = y2 - y1})\nend\n\n---@param v1 ge_tts__Vec2Shape\n---@param v2 ge_tts__Vec2Shape\n---@return number\nfunction Vector2.distance(v1, v2)\n    return math.sqrt(Vector2.distanceSquared(v1, v2))\nend\n\n---@overload fun(v: ge_tts__Vec2Shape): number\n---@param v ge_tts__NumCharVec2Shape\n---@param angle number @angle in degrees\n---@return ge_tts__Vector2\nfunction Vector2.rotate(v, angle)\n    angle = angle * RADIANS_RATIO\n\n    local x = v.x or v[1]\n    local y = v.y or v[2]\n\n    return Vector2(\n        x * math.cos(angle) - y * math.sin(angle),\n        x * math.sin(angle) + y * math.cos(angle)\n    )\nend\n\n---@overload fun(v3: tts__VectorShape): number\n---@param v3 ge_tts__NumCharVec3\n---@return ge_tts__Vector2\nfunction Vector2.fromXZ(v3)\n    return Vector2(v3.x or v3[1], v3.z or v3[3])\nend\n\nreturn Vector2\n\nend)\n__bundle_register(\"UIUtils/LabelFactory\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal TableUtils = require(\"ge_tts/TableUtils\")\nlocal vec2 = require(\"ge_tts/Vector2\")\nlocal LoggerStatic = require(\"ge_tts/Logger\")\nlocal Logger = LoggerStatic()\nLogger.setFilterLevel(LoggerStatic.DEBUG)\nlocal getTransformScale = require(\"ge_tts/ObjectUtils\").getTransformScale\n--require(\"UIUtils/BBCodeStringMethods\")\n\nlocal original_gmatch = string.gmatch\n---@param self string\n---@param pattern string\n---@return fun():string\nfunction string:gmatch(pattern)\n    return --[[---@type fun():string]] original_gmatch(--[[---@type string]] self, pattern)\nend\n\n-- ripped from https://stackoverflow.com/a/19329565/592606\n---@param s string\nlocal function magicLines(s)\n    if s:sub(-1)~=\"\\n\" then s=s..\"\\n\" end\n    return s:gmatch(\"(.-)\\n\")\nend\n\n-- ripped from https://gist.github.com/tjakubo2/7b6248e765163ffcf9963ab1f59f3e18\n---@type table<string, number>\nlocal charWidthTable = {\n    ['`'] = 2381, ['~'] = 2381, ['1'] = 1724, ['!'] = 1493, ['2'] = 2381,\n    ['@'] = 4348, ['3'] = 2381, ['#'] = 3030, ['4'] = 2564, ['$'] = 2381,\n    ['5'] = 2381, ['%'] = 3846, ['6'] = 2564, ['^'] = 2564, ['7'] = 2174,\n    ['&'] = 2777, ['8'] = 2564, ['*'] = 2174, ['9'] = 2564, ['('] = 1724,\n    ['0'] = 2564, [')'] = 1724, ['-'] = 1724, ['_'] = 2381, ['='] = 2381,\n    ['+'] = 2381, ['q'] = 2564, ['Q'] = 3226, ['w'] = 3704, ['W'] = 4167,\n    ['e'] = 2174, ['E'] = 2381, ['r'] = 1724, ['R'] = 2777, ['t'] = 1724,\n    ['T'] = 2381, ['y'] = 2564, ['Y'] = 2564, ['u'] = 2564, ['U'] = 3030,\n    ['i'] = 1282, ['I'] = 1282, ['o'] = 2381, ['O'] = 3226, ['p'] = 2564,\n    ['P'] = 2564, ['['] = 1724, ['{'] = 1724, [']'] = 1724, ['}'] = 1724,\n    ['|'] = 1493, ['\\\\'] = 1923, ['a'] = 2564, ['A'] = 2777, ['s'] = 1923,\n    ['S'] = 2381, ['d'] = 2564, ['D'] = 3030, ['f'] = 1724, ['F'] = 2381,\n    ['g'] = 2564, ['G'] = 2777, ['h'] = 2564, ['H'] = 3030, ['j'] = 1075,\n    ['J'] = 1282, ['k'] = 2381, ['K'] = 2777, ['l'] = 1282, ['L'] = 2174,\n    [';'] = 1282, [':'] = 1282, ['\\''] = 855, ['\"'] = 1724, ['z'] = 1923,\n    ['Z'] = 2564, ['x'] = 2381, ['X'] = 2777, ['c'] = 1923, ['C'] = 2564,\n    ['v'] = 2564, ['V'] = 2777, ['b'] = 2564, ['B'] = 2564, ['n'] = 2564,\n    ['N'] = 3226, ['m'] = 3846, ['M'] = 3846, [','] = 1282, ['<'] = 2174,\n    ['.'] = 1282, ['>'] = 2174, ['/'] = 1923, ['?'] = 2174, [' '] = 1282,\n    ['avg'] = 2500\n}\n\n---@param str string\nlocal function calcButtonSize(str) -- todo: improve precision etc\n    --str = str:stripBBCode()\n    local len, height = 0, 0\n    for line in magicLines(str) do\n        height = height + 1\n        local l = --[[---@type string]] line -- for luanalysis :|\n        local newLen = 0\n        for i = 1, #l do\n            local c = l:sub(i,i)\n            if charWidthTable[c] ~= nil then\n                newLen = newLen + charWidthTable[c]\n            else\n                newLen = newLen + charWidthTable.avg\n            end\n        end\n        if l:len() < 4 then -- extra padding for short labels\n            newLen = newLen * 1.15\n        end\n\n        len = math.max(len, newLen)\n    end\n\n    return len / 5, height\nend\n\n-- some custom objects have the image flipped so it's actually upside down in local coords\n-- since we care about alignment relative to the image we need to correct this\n-- todo: add names into here as they come up\n---@type table<string, boolean>\nlocal invertedImgNames = {\n    Card = true,\n    Deck = true,\n    Custom_Model_Bag = true,\n    Custom_Model = true,\n    Custom_Token = true,\n}\nlocal invertedImgVec = Vector(-1, 1, -1)\n\nlocal buttonScale = 0.002 -- this is for converting button width to local coords\nlocal fontSize = 1000\nlocal baseLineHeight = 800\nlocal baseScale = Vector(0.1, 0.1, 0.1)\n--baseScale = Vector(1,1,1) -- for debug\n\nlocal funcCount = 0\nlocal funcPrefix = \"__alignedButtonCallback_\";\n(--[[---@type table<string, any>]] _G)[funcPrefix] = function() end\n\n---@param obj tts__Object\nlocal function labelFactory(obj)\n    -- obj.clearButtons() -- todo: add to tts-types. no params, always returns true\n\n    local objTransformScale = Vector(getTransformScale(obj))\n\n    local halfSize = obj.getBoundsNormalized().size\n        :scale(objTransformScale)\n        :scale(Vector(-0.5, 0.5, 0.5)) -- for some reason button coords have the x inverted, we just sneak that in here.\n\n    local baseRotation = Vector(0,180,0)\n\n\n    if invertedImgNames[obj.name] then\n        Logger.log(\"inverted x/z axes of custom object\" .. obj.getGUID())\n        halfSize:scale(invertedImgVec)\n        baseRotation = Vector(0,0,0)\n    end\n\n    local originalOffset = obj.getBounds().offset -- the offset changes as you add buttons that extend the bounds, so we have to get it in advance.\n\n    -- todo: add support for axis aligned rotation at least.\n    ---@shape AlignedButtonParameters : tts__CreateButtonParameters\n    ---@field click_function nil | string | fun() | fun(obj: tts__Object) | fun(obj: tts__Object, player: tts__PlayerHandColor) | fun(obj: tts__Object, player: tts__PlayerHandColor, alt_click: boolean)\n    ---@field label string\n    ---@field click_function nil | string\n    ---@field position nil | ge_tts__Vector2 @ scaled by the object's xz size. default {0,0}\n    ---@field align nil | ge_tts__Vector2 @ scaled by the object's button size. default {0,0}\n    ---@field y nil | number @ scaled by the object's y size. default 1\n    ---@field height nil | number @ defaults to 900 (since font size is 1000)\n    ---@field width  nil | number @ defaults to a length based on the label length\n    ---@field scale nil | number | tts__VectorShape\n\n    ---@param params AlignedButtonParameters\n    local function out(params)\n        local computedWidth, numLines = 0, 1\n        if params.label then\n            computedWidth, numLines = calcButtonSize(params.label)\n        end\n        local buttonHeight = params.height or numLines * baseLineHeight\n        local buttonWidth = params.width or computedWidth\n        local finalScale = baseScale:copy()\n        if type(params.scale) == \"number\" then\n            finalScale:scale(--[[---@type number]] params.scale)\n        elseif type(params.scale) == \"table\" then\n            finalScale:scale(Vector(--[[---@type tts__VectorShape]] params.scale))\n        end\n\n        local rotation = params.rotation or baseRotation -- not actually supported\n\n        ---@type string\n        local funcName = funcPrefix\n        if type(params.click_function) == \"function\" then\n            funcCount = funcCount + 1\n            funcName = funcPrefix .. tostring(funcCount);\n            (--[[---@type table<string, any>]] _G)[funcName] = params.click_function\n        elseif type(params.click_function) == \"string\" then\n            funcName = --[[---@type string]] params.click_function\n        end\n\n        local localObjPos = Vector(0, 1.01, 0)\n        if params.position then\n            local relativePos = vec2(--[[---@not nil]] params.position)\n            localObjPos.x = relativePos.x\n            localObjPos.z = relativePos.y\n        end\n\n        if params.y then\n            localObjPos.y = --[[---@not nil]] params.y\n        end\n        if math.abs(localObjPos.y) == 1 then\n            localObjPos.y = localObjPos.y * 1.01 -- dirty fix to prevent z fighting\n        end\n        localObjPos.y = --[[---@not nil]] localObjPos.y / objTransformScale.y\n\n        localObjPos:scale(halfSize)\n\n        Logger.log(\"transform scale is \" .. tostring(objTransformScale))\n        if params.align then\n            local align = --[[---@not nil]] params.align\n            -- todo: can't get them to line up :(\n            localObjPos.x = localObjPos.x + align.x * buttonWidth / 2 * buttonScale * finalScale.x / objTransformScale.x\n            localObjPos.z = localObjPos.z + align.y * buttonHeight / 2 * buttonScale * finalScale.z / objTransformScale.z\n        end\n\n        localObjPos:sub(originalOffset)\n\n        local finalParams = --[[---@type AlignedButtonParameters]] TableUtils.merge(params, {\n            click_function = funcName,\n            position = localObjPos,\n            width = buttonWidth,\n            font_size = fontSize,\n            height = buttonHeight,\n            scale = finalScale,\n            rotation = rotation,\n        })\n\n        if obj.is_face_down then\n            localObjPos.x = -localObjPos.x\n            localObjPos.y = -localObjPos.y\n            if params.rotation then\n                finalParams.rotation = Vector(--[[---@not nil]] params.rotation):setAt('z', 180)\n            else\n                finalParams.rotation = {0,0,180}\n            end\n        end\n\n        obj.createButton(--[[---@type tts__CreateButtonParameters]] finalParams)\n    end\n\n    return out\nend\n\nreturn labelFactory\nend)\n__bundle_register(\"ge_tts/ObjectUtils\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal Base64 = require(\"ge_tts.Base64\")\nlocal EventManager = require(\"ge_tts.EventManager\")\nlocal Json = require(\"ge_tts.Json\")\nlocal Object = require(\"ge_tts.Object\")\nlocal SaveManager = require(\"ge_tts.SaveManager\")\nlocal TableUtils = require(\"ge_tts.TableUtils\")\nlocal Vector3 = require(\"ge_tts.Vector3\")\n\n---There's a random component to our GUIDs designed to mitigate collisions is a user wants to copy objects between mods.\nlocal GUID_PREFIX_RANDOM_BYTE_LENGTH = 3\n\n---@type string\nlocal guidPrefix\n\n---@type number\nlocal guidIndex = 0\n\n---@type table<string, {object: tts__Object, json: nil | string, callbacks: tts__ObjectCallbackFunction[]}> @GUID key\nlocal pendingSpawns = {}\n\n---@param guid string\n---@param object tts__Object\nlocal function triggerPendingCallbacks(guid, object)\n    local pendingSpawn = pendingSpawns[guid]\n\n    if not pendingSpawn then\n        return\n    end\n\n    pendingSpawns[guid] = nil\n\n    for _, callback in ipairs(pendingSpawn.callbacks) do\n        callback(object)\n    end\nend\n\n---@class ge_tts__ObjectUtils\nlocal ObjectUtils = {}\n\n---@param obj tts__Object\n---@return ge_tts__Vector3\nfunction ObjectUtils.getTransformScale(obj)\n    local rotation = obj.getRotation()\n    local onesVector = Vector3(1, 1, 1).rotateZ(rotation.z).rotateX(rotation.x).rotateY(rotation.y)\n    local scale = Vector3(obj.positionToLocal(onesVector.add(obj.getPosition())))\n    return scale\nend\n\n---@param tag string\n---@return boolean\nfunction ObjectUtils.isContainerTag(tag)\n    return tag == Object.Tag.Deck or tag == Object.Tag.Bag\nend\n\n---@return string\nfunction ObjectUtils.nextGuid()\n    guidIndex = guidIndex + 1\n    return guidPrefix .. tostring(guidIndex)\nend\n\n---@param objectState tts__ObjectState\n---@param guid string\n---@param callback_function nil | tts__ObjectCallbackFunction\nlocal function safeSpawnObject(objectState, guid, callback_function)\n    objectState.GUID = guid\n\n    local json = Json.encode(objectState)\n    local spawningObject = spawnObjectJSON({json = json})\n\n    pendingSpawns[guid] = {\n        callbacks = {},\n        object = spawningObject,\n        json = json\n    }\n\n    if callback_function then\n        table.insert(pendingSpawns[guid].callbacks, --[[---@not nil]] callback_function)\n    end\n\n    return spawningObject\nend\n\n---\n---Unlike the built-in spawnObjectJSON(), this function guarantees the object will be spawned in the scene in onLoad\n---(SaveManager) callbacks i.e. if a user rewinds your mod.\n---\n---There is an edge-case with the built-in spawnObjectJSON() if Tabletop Simulator performs a save state immediately\n---after your call to spawnObjectJSON(). When you rewind (or load) save state the object may or may not have spawned.\n---Even if the object did spawn before the save state was generated (and hence exists when the user rewinds or loads),\n---the GUID on the object reference returned to you from spawnObjectJSON() is not guaranteed to be the final GUID of the\n---object within the scene. Thus, even if you correctly saved this GUID in onSave, your attempt to recover the object\n---may fail, as it ended up with a different GUID.\n---\n---To avoid these pitfalls, this function does two things.\n---\n---Firstly, we provide a GUID for your object that is guaranteed[*] to be unique.\n---\n---Secondly, onLoad ge_tts looks for any objects that should exist but don't. If it discovers any, it will spawn them\n---for you automatically. In your own onLoad (SaveManager) callbacks you can call ObjectUtils.recoverSafeSpawnedObject\n---to recover a reference to any objects that were safe spawned.\n---\n---WARNING: If you provide a GUID for your object in jsonTable, it will not be used. Instead, please grab the GUID from\n---the object reference returned from this function. GUIDs we generate do not match the same format as those generated\n---by Tabletop Simulator. We have confirmed with Berserk that internally GUIDs are only ever treated as strings and it\n---is entirely safe for us to use our own format.\n---\n---[*] If you're really determined you can still create GUID collisions. However, it won't happen by accident. You'd\n---have to be intentionally spawning objects (not using this method) with specific GUIDs that you're specifically trying\n---to make collide.\n---\n---@overload fun(objectState: tts__ObjectState): tts__Object\n---@param objectState tts__ObjectState @Will be JSON encoded after we generate and assign a GUID.\n---@param callback_function nil | tts__ObjectCallbackFunction @Callback that will be called when the object has finished spawning.\n---@return tts__Object\nfunction ObjectUtils.safeSpawnObject(objectState, callback_function)\n    return safeSpawnObject(objectState, ObjectUtils.nextGuid(), callback_function)\nend\n\n---\n---Same as ObjectUtils.safeSpawnObject(...), except that instead of generating a unique GUID, it is your responsibility\n---to provide one. If you fail to provide a unique GUID, all safety guarantees are lost.\n---\n---In practice, you should only call this method if you're respawning an object that was destroyed.\n---\n---@overload fun(objectState: tts__ObjectState, guid: string): tts__Object\n---@param objectState tts__ObjectState @Will be JSON encoded after we generate and assign a GUID.\n---@param guid string\n---@param callback_function nil | tts__ObjectCallbackFunction @Callback that will be called when the object has finished spawning.\n---@return tts__Object\nfunction ObjectUtils.safeRespawnObject(objectState, guid, callback_function)\n    return safeSpawnObject(objectState, guid, callback_function)\nend\n\n---@overload fun(position: nil | tts__VectorShape): tts__ObjectState_Transform\n---@overload fun(position: nil | tts__VectorShape, rotation: nil | tts__VectorShape): tts__ObjectState_Transform\n---@overload fun(position: nil | tts__VectorShape, rotation: nil | tts__VectorShape, scale: nil | tts__VectorShape): tts__ObjectState_Transform\n---@overload fun(transform: {position: nil | tts__VectorShape, rotation: nil | tts__VectorShape, scale: nil | tts__VectorShape}): tts__ObjectState_Transform\n---@vararg ge_tts__Vector3\n---@return tts__ObjectState_Transform\nfunction ObjectUtils.transformState(...)\n    ---@type tts__ObjectState_Transform\n    local state = {}\n\n    ---@type nil | tts__VectorShape\n    local position\n\n    ---@type nil | tts__VectorShape\n    local rotation = nil\n\n    ---@type nil | tts__VectorShape\n    local scale = nil\n\n    if select('#', ...) == 1 then\n        local args = --[[---@type table]] ...\n\n        if args[1] then\n            position = --[[---@type tts__VectorShape]] args\n        else\n            local transform = --[[---@type {position: nil | tts__VectorShape, rotation: nil | tts__VectorShape, scale: nil | tts__VectorShape}]] args\n            position = transform.position\n            rotation = transform.rotation\n            scale = transform.scale\n        end\n    else\n        position, rotation, scale = ...\n    end\n\n    if position then\n        state.posX = (--[[---@type tts__CharVectorShape]] position).x or (--[[---@type tts__NumVectorShape]] position)[1]\n        state.posY = (--[[---@type tts__CharVectorShape]] position).y or (--[[---@type tts__NumVectorShape]] position)[2]\n        state.posZ = (--[[---@type tts__CharVectorShape]] position).z or (--[[---@type tts__NumVectorShape]] position)[3]\n    end\n\n    if rotation then\n        state.rotX = (--[[---@type tts__CharVectorShape]] rotation).x or (--[[---@type tts__NumVectorShape]] rotation)[1]\n        state.rotY = (--[[---@type tts__CharVectorShape]] rotation).y or (--[[---@type tts__NumVectorShape]] rotation)[2]\n        state.rotZ = (--[[---@type tts__CharVectorShape]] rotation).z or (--[[---@type tts__NumVectorShape]] rotation)[3]\n    end\n\n    if scale then\n        state.scaleX = (--[[---@type tts__CharVectorShape]] scale).x or (--[[---@type tts__NumVectorShape]] scale)[1]\n        state.scaleY = (--[[---@type tts__CharVectorShape]] scale).y or (--[[---@type tts__NumVectorShape]] scale)[2]\n        state.scaleZ = (--[[---@type tts__CharVectorShape]] scale).z or (--[[---@type tts__NumVectorShape]] scale)[3]\n    end\n\n    return state\nend\n\n---@param transformState tts__ObjectState_Transform\n---@return ge_tts__Vector3\nfunction ObjectUtils.getTransformStatePosition(transformState)\n    return Vector3(\n        transformState.posX or 0,\n        transformState.posY or 0,\n        transformState.posZ or 0\n    )\nend\n\n---@param transformState tts__ObjectState_Transform\n---@return ge_tts__Vector3\nfunction ObjectUtils.getTransformStateRotation(transformState)\n    return Vector3(\n        transformState.rotX or 0,\n        transformState.rotY or 0,\n        transformState.rotZ or 0\n    )\nend\n\n---@param transformState tts__ObjectState_Transform\n---@return ge_tts__Vector3\nfunction ObjectUtils.getTransformStateScale(transformState)\n    return Vector3(\n        transformState.scaleX or 1,\n        transformState.scaleY or 1,\n        transformState.scaleZ or 1\n    )\nend\n\n---\n---Same as ObjectUtils.safeSpawnObject except that each entry in containerState.ContainedObjects will also be assigned a\n---unique GUID.\n---\n---@overload fun(containerState: tts__ContainerState): tts__Container\n---@param containerState tts__ContainerState @Will be JSON encoded after we generate and assign a GUID.\n---@param callback_function nil | tts__Callback<fun(container: tts__Container): void> @Callback that will be called when the object has finished spawning.\n---@return tts__Container\nfunction ObjectUtils.safeSpawnContainer(containerState, callback_function)\n    for _, objectState in ipairs(containerState.ContainedObjects) do\n        objectState.GUID = ObjectUtils.nextGuid()\n    end\n\n    return --[[---@type tts__Container]] ObjectUtils.safeSpawnObject(containerState, --[[---@type nil | tts__ObjectCallbackFunction]] callback_function)\nend\n\n---\n---Provides a mechanism to obtain a reference to safe spawning objects, as well as a mechanism to register a callback\n---that will be called when an object (safe spawned or otherwise) has finished spawning.\n---\n---Accepts a TTS object, or a GUID (string). Any TTS object may be provided (safe spawned or otherwise), however when\n---providing a GUID, this GUID should only ever correspond with an object that was safe spawned.\n---\n---Returns a TTS object or nil. If nil is returned, no such object exists and the provided callback will never be\n---called. Aside from providing an invalid GUID, this may occur if the object spawned in the past and has since been\n---deleted.\n---\n---If the object has already finished spawning, the provided callback will be called immediately (synchronously).\n---Otherwise, the callback will be called as soon as the object has finished spawning.\n---\n---@overload fun(guid: string): nil | tts__Object\n---@param guidOrObject string | tts__Object\n---@param callback nil | fun(object: tts__Object): void\n---@return nil | tts__Object\nfunction ObjectUtils.getSpawnedObject(guidOrObject, callback)\n    ---@type string\n    local guid\n\n    ---@type nil | tts__Object\n    local existingObject = nil\n\n    if type(guidOrObject) == 'userdata' then\n        ---@type tts__Object\n        local object = --[[---@type tts__Object]] guidOrObject\n\n        if object == nil then\n            return nil\n        end\n\n        if object.spawning then\n            existingObject = object\n            guid = object.guid\n        else\n            callback(object)\n            return object\n        end\n    else\n        guid = --[[---@type string]] guidOrObject\n    end\n\n    if not existingObject then\n        existingObject = getObjectFromGUID(guid)\n    end\n\n    if callback then\n        if existingObject ~= nil and (--[[---@not nil]] existingObject).spawning and not pendingSpawns[guid] then\n            -- For consistency, we'll handle non-safe spawned objects (e.g. those being pulled from a container) in the same fashion as we would safe spawned\n            -- objects i.e. we'll call the provided callback once the object has finished spawning.\n            pendingSpawns[guid] = {\n                callbacks = {},\n                object = (--[[---@not nil]] existingObject),\n            }\n        end\n\n        local pendingSpawn = pendingSpawns[guid]\n\n        if pendingSpawn then\n            table.insert(pendingSpawn.callbacks, --[[---@not nil]] callback)\n            return pendingSpawn.object\n        end\n    end\n\n    if callback and existingObject ~= nil then\n        callback(--[[---@type tts__Object]] existingObject)\n    end\n\n    return existingObject\nend\n\n---@param object tts__Object\nlocal function onObjectSpawn(object)\n    triggerPendingCallbacks(object.guid, object)\nend\n\nEventManager.addHandler('onObjectSpawn', onObjectSpawn)\n\n---@shape __ge_tts__ObjectUtils_SavedStateData\n---@field guidPrefix string\n---@field pendingSpawns table<string, string>\n\n---@return string\nlocal function onSave()\n    -- Entries can be injected into pendingSpawns for objects not spawned with safeSpawnObject. However, seems as we weren't responsible for spawning these\n    -- objects, we make no attempt to save (and potentially respawn) these objects.\n    local pendingJsonSpawns = TableUtils.map(\n        TableUtils.select(pendingSpawns, function(json) return json ~= nil end),\n        function(pendingSpawn) return --[[---@not nil]] pendingSpawn.json end\n    )\n\n    ---@type __ge_tts__ObjectUtils_SavedStateData\n    local data = {\n        guidPrefix = guidPrefix,\n        pendingSpawns = pendingJsonSpawns,\n    }\n\n    return Json.encode(data)\nend\n\nlocal function onFirstLoad()\n    local guidRandomBytes = {}\n\n    for _ = 1, GUID_PREFIX_RANDOM_BYTE_LENGTH do\n        table.insert(guidRandomBytes, math.random(1, 255))\n    end\n\n    guidPrefix = Base64.encode(guidRandomBytes, false) .. ':'\nend\n\n---@param savedState string\nlocal function onLoad(savedState)\n    if savedState == '' then\n        onFirstLoad()\n        return\n    end\n\n    local data = --[[---@type __ge_tts__ObjectUtils_SavedStateData]] Json.decode(savedState)\n\n    guidPrefix = data.guidPrefix\n\n    for guid, json in pairs(data.pendingSpawns) do\n        local existingObject = getObjectFromGUID(guid)\n\n        if not existingObject then\n            local spawningObject = spawnObjectJSON({json = json})\n\n            pendingSpawns[guid] = {\n                callbacks = {},\n                object = spawningObject,\n                json = json\n            }\n        end\n    end\nend\n\nlocal MODULE_NAME = 'ge_tts.ObjectUtils'\n\nSaveManager.registerOnSave(MODULE_NAME, onSave)\nSaveManager.registerOnLoad(MODULE_NAME, onLoad)\n\nreturn ObjectUtils\n\nend)\n__bundle_register(\"ge_tts.Vector3\", function(require, _LOADED, __bundle_register, __bundle_modules)\n---\n--- A 3D vector implementation.\n---\n--- Components can be accessed as x, y and z properties, or indexed by numbers [1], [2] and [3].\n---\n---@class ge_tts__Vector3 : __ge_tts__NumCharVec3<number>\n\n---@shape __ge_tts__NumCharVec3<T>\n---@field x T\n---@field y T\n---@field z T\n---@field [1] T\n---@field [2] T\n---@field [3] T\n\n---@shape ge_tts__NumCharVec3 : __ge_tts__NumCharVec3<number>\n\n---@param vector ge_tts__Vector3\n---@param index any\nlocal function numberedIndex(vector, index)\n    if type(index) == 'number' then\n        if index == 1 then\n            return vector.x\n        elseif index == 2 then\n            return vector.y\n        elseif index == 3 then\n            return vector.z\n        end\n\n        return nil\n    end\nend\n\nlocal RADIANS_RATIO = math.pi / 180\n\n---@class ge_tts__static_Vector3\n---@overload fun(): ge_tts__Vector3\n---@overload fun(x: number, y: number, z: number): ge_tts__Vector3\n---@overload fun(source: tts__VectorShape): ge_tts__Vector3\nlocal Vector3 = {}\n\nsetmetatable(Vector3, {\n    ---@param sourceXOrVector nil | __ge_tts__NumCharVec3<nil | number>\n    ---@param sourceY nil | number\n    ---@param sourceZ nil | number\n    __call = function(_, sourceXOrVector, sourceY, sourceZ)\n        local self = --[[---@type ge_tts__Vector3]] {x = 0, y = 0, z = 0}\n\n        setmetatable(self, {\n            __index = numberedIndex,\n            __tostring = function(_)\n                return self.toString()\n            end,\n        })\n\n        if sourceXOrVector then\n            if type(sourceXOrVector) == 'table' then\n                local source = --[[---@type __ge_tts__NumCharVec3<nil | number>]] sourceXOrVector\n\n                self.x = source.x or source[1] or self.x\n                self.y = source.y or source[2] or self.y\n                self.z = source.z or source[3] or self.z\n            else\n                self.x = --[[---@type number]] sourceXOrVector\n                self.y = --[[---@type number]] sourceY\n                self.z = --[[---@type number]] sourceZ\n            end\n        end\n\n        ---@return string\n        function self.toString()\n            return '{x = ' .. self.x .. ', y = ' .. self.y .. ', z = ' .. self.z .. '}'\n        end\n\n        ---@return tts__CharVectorShape\n        function self.toData()\n            return {x = self.x, y = self.y, z = self.z}\n        end\n\n        ---@return number\n        function self.lengthSquared()\n            return Vector3.lengthSquared(self)\n        end\n\n        ---@return number\n        function self.length()\n            return Vector3.length(self)\n        end\n\n        ---Add a vector to self.\n        ---@overload fun(v: tts__VectorShape): self\n        ---@param v ge_tts__NumCharVec3\n        ---@return ge_tts__Vector3 @self\n        function self.add(v)\n            self.x = self.x + (v.x or v[1])\n            self.y = self.y + (v.y or v[2])\n            self.z = self.z + (v.z or v[3])\n            return self\n        end\n\n        ---Subtract a vector from self.\n        ---@overload fun(v: tts__VectorShape): self\n        ---@param v ge_tts__NumCharVec3\n        ---@return ge_tts__Vector3 @self\n        function self.sub(v)\n            self.x = self.x - (v.x or v[1])\n            self.y = self.y - (v.y or v[2])\n            self.z = self.z - (v.z or v[3])\n            return self\n        end\n\n        ---@param factor number | tts__VectorShape\n        ---@return ge_tts__Vector3 @self\n        function self.scale(factor)\n            if (type(factor) == 'number') then\n                self.x = self.x * factor\n                self.y = self.y * factor\n                self.z = self.z * factor\n            else\n                self.x = self.x * ((--[[---@type tts__CharVectorShape]] factor).x or (--[[---@type tts__NumVectorShape]] factor)[1])\n                self.y = self.y * ((--[[---@type tts__CharVectorShape]] factor).y or (--[[---@type tts__NumVectorShape]] factor)[2])\n                self.z = self.z * ((--[[---@type tts__CharVectorShape]] factor).z or (--[[---@type tts__NumVectorShape]] factor)[3])\n            end\n\n            return self\n        end\n\n        ---@return ge_tts__Vector3 @self\n        function self.normalize()\n            return self.scale(1 / self.length())\n        end\n\n        ---@param angle number @angle in degrees\n        ---@return ge_tts__Vector3 @self\n        function self.rotateX(angle)\n            angle = angle * RADIANS_RATIO\n            local y = self.y\n            self.y = y * math.cos(angle) - self.z * math.sin(angle)\n            self.z = y * math.sin(angle) + self.z * math.cos(angle)\n            return self\n        end\n\n        ---@param angle number @angle in degrees\n        ---@return ge_tts__Vector3 @self\n        function self.rotateY(angle)\n            angle = angle * RADIANS_RATIO\n            local x = self.x\n            self.x = self.z * math.sin(angle) + x * math.cos(angle)\n            self.z = self.z * math.cos(angle) - x * math.sin(angle)\n            return self\n        end\n\n        ---@param angle number @angle in degrees\n        ---@return ge_tts__Vector3 @self\n        function self.rotateZ(angle)\n            angle = angle * RADIANS_RATIO\n            local x = self.x\n            self.x = x * math.cos(angle) - self.y * math.sin(angle)\n            self.y = x * math.sin(angle) + self.y * math.cos(angle)\n            return self\n        end\n\n        return self\n    end,\n})\n\n---@overload fun(v: tts__VectorShape): number\n---@param v ge_tts__NumCharVec3\n---@return number\nfunction Vector3.lengthSquared(v)\n    local x = v.x or v[1]\n    local y = v.y or v[2]\n    local z = v.z or v[3]\n    return x * x + y * y + z * z\nend\n\n---@param v tts__VectorShape\n---@return number\nfunction Vector3.length(v)\n    return math.sqrt(Vector3.lengthSquared(v))\nend\n\n---@param v1 tts__VectorShape\n---@param v2 tts__VectorShape\n---@return ge_tts__Vector3\nfunction Vector3.add(v1, v2)\n    return Vector3(v1).add(v2)\nend\n\n---@param v1 tts__VectorShape\n---@param v2 tts__VectorShape\n---@return ge_tts__Vector3\nfunction Vector3.sub(v1, v2)\n    return Vector3(v1).sub(v2)\nend\n\n---@param v tts__VectorShape\n---@param factor number | tts__VectorShape\n---@return ge_tts__Vector3\nfunction Vector3.scale(v, factor)\n    return Vector3(v).scale(factor)\nend\n\n---@param v tts__VectorShape\n---@return ge_tts__Vector3\nfunction Vector3.normalize(v)\n    return Vector3(v).normalize()\nend\n\n---@overload fun(v1: tts__VectorShape, v2: tts__VectorShape): ge_tts__Vector3\n---@param v1 ge_tts__NumCharVec3\n---@param v2 ge_tts__NumCharVec3\n---@return ge_tts__Vector3\nfunction Vector3.cross(v1, v2)\n    local x1 = v1.x or v1[1]\n    local y1 = v1.y or v1[2]\n    local z1 = v1.z or v1[3]\n\n    local x2 = v2.x or v2[1]\n    local y2 = v2.y or v2[2]\n    local z2 = v2.z or v2[3]\n\n    return Vector3(y1 * z2 - z1 * y2, z1 * x2 - x1 * z2, x1 * y2 - y1 * x2)\nend\n\n---@overload fun(v1: tts__VectorShape, v2: tts__VectorShape): number\n---@param v1 ge_tts__NumCharVec3\n---@param v2 ge_tts__NumCharVec3\n---@return number\nfunction Vector3.dot(v1, v2)\n    local x1 = v1.x or v1[1]\n    local y1 = v1.y or v1[2]\n    local z1 = v1.z or v1[3]\n\n    local x2 = v2.x or v2[1]\n    local y2 = v2.y or v2[2]\n    local z2 = v2.z or v2[3]\n\n    return x1 * x2 + y1 * y2 + z1 * z2\nend\n\n---@overload fun(v1: tts__VectorShape, v2: tts__VectorShape): number\n---@param v1 ge_tts__NumCharVec3\n---@param v2 ge_tts__NumCharVec3\n---@return number\nfunction Vector3.distanceSquared(v1, v2)\n    local x1 = v1.x or v1[1]\n    local y1 = v1.y or v1[2]\n    local z1 = v1.z or v1[3]\n\n    local x2 = v2.x or v2[1]\n    local y2 = v2.y or v2[2]\n    local z2 = v2.z or v2[3]\n\n    return Vector3.lengthSquared({x = x2 - x1, y = y2 - y1, z = z2 - z1})\nend\n\n---@overload fun(v1: tts__VectorShape, v2: tts__VectorShape): number\n---@param v1 ge_tts__NumCharVec3\n---@param v2 ge_tts__NumCharVec3\n---@return number\nfunction Vector3.distance(v1, v2)\n    return math.sqrt(Vector3.distanceSquared(v1, v2))\nend\n\n---@overload fun(v: tts__VectorShape, angle: number): ge_tts__Vector3\n---@param v ge_tts__NumCharVec3\n---@param angle number @angle in degrees\n---@return ge_tts__Vector3\nfunction Vector3.rotateX(v, angle)\n    angle = angle * RADIANS_RATIO\n\n    local x = v.x or v[1]\n    local y = v.y or v[2]\n    local z = v.z or v[3]\n\n    return Vector3(\n        x,\n        y * math.cos(angle) - z * math.sin(angle),\n        y * math.sin(angle) + z * math.cos(angle)\n    )\nend\n\n---@overload fun(v: tts__VectorShape, angle: number): ge_tts__Vector3\n---@param v ge_tts__NumCharVec3\n---@param angle number @angle in degrees\n---@return ge_tts__Vector3\nfunction Vector3.rotateY(v, angle)\n    angle = angle * RADIANS_RATIO\n\n    local x = v.x or v[1]\n    local y = v.y or v[2]\n    local z = v.z or v[3]\n\n    return Vector3(\n        z * math.sin(angle) + x * math.cos(angle),\n        y,\n        z * math.cos(angle) - x * math.sin(angle)\n    )\nend\n\n---@overload fun(v: tts__VectorShape, angle: number): ge_tts__Vector3\n---@param v ge_tts__NumCharVec3\n---@param angle number @angle in degrees\n---@return ge_tts__Vector3\nfunction Vector3.rotateZ(v, angle)\n    angle = angle * RADIANS_RATIO\n\n    local x = v.x or v[1]\n    local y = v.y or v[2]\n    local z = v.z or v[3]\n\n    return Vector3(\n        x * math.cos(angle) - y * math.sin(angle),\n        x * math.sin(angle) + y * math.cos(angle),\n        z\n    )\nend\n\nreturn Vector3\n\nend)\n__bundle_register(\"ge_tts.TableUtils\", function(require, _LOADED, __bundle_register, __bundle_modules)\n-- This module operates on tables that contain only positive consecutive integer keys starting at 1 (i.e. a plain array), as well as tables which contain no\n-- array component. Behavior is undefined for tables that contain a key for [1] as well as non-consecutive integer or non-integer keys.\n\n---@generic T\n---@param length number\n---@return fun(arr: std__Packed<T>, i: number): nil | (number, T)\nlocal function fixedLengthIterator(length)\n    ---@type fun(arr: std__Packed<T>, i: number): nil | (number, T)\n    return function(arr, i)\n        i = i + 1\n        if i <= length then\n            return i, arr[i]\n        end\n    end\nend\n\n---@overload fun<V, A : std__Packed<V>>(arr: A): (fun(arr: A, i: number): number, V), V[], 0\n---@overload fun<V>(arr: V[]): (fun(arr: V[], i: number): number, V), V[], 0\n---@generic K, V\n---@param tab table<K, V>\n---@return (fun(tab: table<K, V>, k: K): nil | (K, V)), table<K, V>, K\nlocal function iterate(tab)\n    local fixedLength = (--[[---@type std__Packed<any>]] tab).n\n\n    if type(fixedLength) == 'number' and fixedLength >= 0 then\n        return --[[---@type fun(tab: table<K, V>, k: K): nil | (K, V)]] fixedLengthIterator(fixedLength), tab, --[[---@type K]] 0\n    elseif tab[--[[---@type K]] 1] ~= nil then\n        return --[[---@type (fun(tab: table<K, V>, k: K): nil | (K, V)), table<K, V>, K]] ipairs(--[[---@type V[] ]] tab)\n    else\n        return pairs(tab)\n    end\nend\n\n---@class ge_tts__TableUtils\nlocal TableUtils = {}\n\n--- Returns true if TableUtils will interpret the table as an array i.e. if tab[1] ~= nil or\n--- type(tab.n) == 'number'.\n---\n--- If tab is an array, and it's passed to a TableUtils function that iterates over tab calling a callback, the\n--- iteration over keys is guaranteed to take place in sequential order (à la ipairs).\n---\n--- In the case of type(tab.n) == 'number', tab.n will be treated as the length of the array and TableUtils will\n--- continue iterating over \"holes\" (nil values) up to this length.\n---@overload fun<V>(tab: V[]): true\n---@overload fun<V>(tab: std__Packed<V>): true\n---@overload fun<V>(tab: table<boolean, V>): false\n---@overload fun<V>(tab: table<string, V>): false\n---@overload fun<V>(tab: table<table, V>): false\n---@overload fun<V>(tab: table<userdata, V>): false\n---@param tab table\n---@return boolean\nfunction TableUtils.isArray(tab)\n    return tab[1] ~= nil or type((--[[---@type std__Packed<any>]] tab).n) == 'number'\nend\n\n--- Returns the length of arr and a boolean indicating whether arr is a std__Packed<V>.\n---@generic V\n---@param arr V[] | std__Packed<V>\n---@return number, boolean\nfunction TableUtils.arrayLength(arr)\n    local fixedLength = (--[[---@type std__Packed<V>]] arr).n\n    local isFixed = type(fixedLength) == 'number'\n    return isFixed and fixedLength or #arr, isFixed\nend\n\n---@overload fun<V, MappedV>(tab: V[], func: fun(value: V, key: number): MappedV): MappedV[]\n---@generic K, V, MappedV\n---@param tab table<K, V>\n---@param func fun(value: V, key: K): MappedV\n---@return table<K, MappedV>\nfunction TableUtils.map(tab, func)\n    ---@type table<K, MappedV>\n    local mapped = {}\n\n    for k, v in iterate(tab)  do\n        mapped[k] = func(v, k)\n    end\n\n    return mapped\nend\n\n---@generic K, V\n---@param tab table<K, V>\n---@return table<V, K>\nfunction TableUtils.invert(tab)\n    ---@type table<V, K>\n    local inverted = {}\n\n    for k, v in iterate(tab) do\n        if v then\n            inverted[v] = k\n        end\n    end\n\n    return inverted\nend\n\n---@generic K, V, RemappedK\n---@param tab table<K, V>\n---@param func fun(value: V, key: K): RemappedK\n---@return table<RemappedK, V>\nfunction TableUtils.remap(tab, func)\n    ---@type table<RemappedK, V>\n    local remapped = {}\n\n    for k, v in iterate(tab) do\n        remapped[func(v, k)] = v\n    end\n\n    return remapped\nend\n\n---@overload fun<V>(arr: V[], func: fun(value: V, index: number): boolean): V[]\n---@generic K, V\n---@param tab table<K, V>\n---@param func fun(value: V, key: K): any\n---@return table<K, V>\nfunction TableUtils.select(tab, func)\n    ---@type table<K, V>\n    local selected = {}\n\n    if TableUtils.isArray(tab) then\n        local i = 0\n\n        for k, v in iterate(tab) do\n            if func(v, k) then\n                i = i + 1\n                (--[[---@type V[] ]] selected)[i] = v\n            end\n        end\n    else\n        for k, v in pairs(tab) do\n            if func(v, k) then\n                selected[k] = v\n            end\n        end\n    end\n\n    return selected\nend\n\n---@overload fun<V>(arr: V[], func: fun(value: V, index: number): boolean): V[]\n---@generic K, V\n---@param tab table<K, V>\n---@param func fun(value: V, key: K): boolean\n---@return table<K, V>\nfunction TableUtils.reject(tab, func)\n    return TableUtils.select(tab, function(v, k) return not func(v, k) end)\nend\n\n---@overload fun<R, K, V: R>(tab: table<K, V>, func: fun(memo: R, value: V, key: K): R): nil | R\n---@generic K, V, R\n---@param tab table<K, V>\n---@param initial R\n---@param func fun(memo: R, value: V, key: K): R\n---@return R\nfunction TableUtils.reduce(tab, initial, func)\n    local iterator, _, initialK = iterate(tab)\n\n    ---@type R\n    local memo\n\n    ---@type fun(memo: R, value: V, key: K): R\n    local reducer\n\n    if func then\n        memo = initial\n        reducer = func\n    else\n        local control, value = iterator(tab, initialK)\n\n        if control == nil then\n            -- Overload may return nil\n            return --[[---@type any]] nil\n        end\n\n        initialK = --[[---@not nil]] control\n        memo = --[[---@type R]] value\n        reducer = --[[---@type fun(memo: R, value: V, key: K): R]] initial\n    end\n\n    if not func then\n        initialK = --[[---@type K]] memo\n    end\n\n    for k, v in iterator, tab, initialK do\n        memo = reducer(memo, v, k)\n    end\n\n    return memo\nend\n\n---@generic K, V\n---@param tab table<K, V>\n---@param value any\n---@return nil | K\nfunction TableUtils.find(tab, value)\n    for k, v in iterate(tab) do\n        if v == value then\n            return k\n        end\n    end\n\n    return nil\nend\n\n---@generic K, V\n---@param tab table<K, V>\n---@param func fun(value: V, key: K): boolean\n---@return nil | V, nil | K\nfunction TableUtils.detect(tab, func)\n    for k, v in iterate(tab) do\n        if func(v, k) then\n            return v, k\n        end\n    end\n\n    return nil, nil\nend\n\n---@overload fun<T>(tab: T): T\n---@generic T\n---@param tab T\n---@param recursive boolean\n---@return T\nfunction TableUtils.copy(tab, recursive)\n    ---@type table\n    local copied = {}\n\n    for k, v in pairs(--[[---@type table]] tab) do\n        copied[k] = (recursive and type(v) == 'table' and\n            TableUtils.copy(--[[---@type table]] v, true)\n        ) or v\n    end\n\n    return --[[---@type T]] copied\nend\n\n---@overload fun<V>(arr: V[], ...: V[]): void\n---@overload fun<V>(arr: std__Packed<V>, ...: V[] | std__Packed<V>): void\n---@generic K, V\n---@param tab table<K, V>\n---@vararg table<K, V>\n---@return void\nfunction TableUtils.inject(tab, ...)\n    local otherTables = { ... }\n\n    if TableUtils.isArray(tab) then\n        local arr = --[[---@type V[] | std__Packed<V>]] tab\n        local i, isFixed = TableUtils.arrayLength(arr)\n\n        for _, t in ipairs(otherTables) do\n            for _, v in iterate(--[[---@type V[] ]] t) do\n                i = i + 1\n                arr[i] = v\n            end\n        end\n\n        if isFixed then\n            (--[[---@type std__Packed<V>]] tab).n = i\n        end\n    else\n        for _, t in ipairs(otherTables) do\n            for k, v in pairs(t) do\n                tab[k] = v\n            end\n        end\n    end\nend\n\n---@overload fun<T>(...: T): T\n---@vararg table\n---@return table\nfunction TableUtils.merge(...)\n    local merged = {}\n    TableUtils.inject(merged, ...)\n    return merged\nend\n\n---@overload fun<V>(arrays: std__Packed<V>[]): std__Packed<V>, number\n---@generic V\n---@param arrays V[][]\n---@return V[], number\nfunction TableUtils.flatten(arrays)\n    ---@type V[]\n    local flattened = {}\n    local i = 0\n\n    for _, array in ipairs(arrays) do\n        for _, v in iterate(array) do\n            i = i + 1\n            flattened[i] = v\n        end\n    end\n\n\n    if i > 0 and type((--[[---@type std__Packed<V[]>]] arrays[1]).n) == 'number' then\n        (--[[---@type std__Packed<V>]] flattened).n = i\n    end\n\n    return flattened, i\nend\n\n---@generic K, V\n---@param tab table<K, V>\n---@return K[]\nfunction TableUtils.keys(tab)\n    ---@type K[]\n    local keys = {}\n\n    for k, _ in pairs(tab) do\n        table.insert(keys, k)\n    end\n\n    return keys\nend\n\n---@overload fun<V>(arr: std__Packed<V>): std__Packed<V>\n---@generic K, V\n---@param tab table<K, V>\n---@return V[], number\nfunction TableUtils.values(tab)\n    ---@type V[]\n    local values = {}\n    local i = 0\n\n    for _, v in iterate(tab) do\n        i = i + 1\n        values[i] = v\n    end\n\n    if type((--[[---@type std__Packed<V>]] tab).n) == 'number' then\n        (--[[---@type std__Packed<V>]] values).n = i\n    end\n\n    return values, i\nend\n\n---@param tab table\n---@return number\nfunction TableUtils.count(tab)\n    local count = 0\n\n    for _, _ in pairs(tab) do\n        count = count + 1\n    end\n\n    return count\nend\n\n---@overload fun<V>(arr: std__Packed<V>): std__Packed<V>\n---@generic V\n---@param arr V[]\n---@return V[]\nfunction TableUtils.reverse(arr)\n    ---@type V[]\n    local reversed = {}\n\n    local length, isFixed = TableUtils.arrayLength(arr)\n    local j = 1\n\n    for i = length, 1, -1 do\n        reversed[j] = arr[i]\n        j = j + 1\n    end\n\n    if isFixed then\n        (--[[---@type std__Packed<V>]] reversed).n = length\n    end\n\n    return reversed\nend\n\n---@overload fun<V>(arr: std__Packed<V>, start: number): std__Packed<V>\n---@overload fun<V>(arr: V[], start: number): V[]\n---@generic V\n---@param arr V[]\n---@param start number\n---@param finish number\n---@return V[]\nfunction TableUtils.range(arr, start, finish)\n    ---@type V[]\n    local range = {}\n\n    for i in fixedLengthIterator(finish or TableUtils.arrayLength(arr)), arr, start - 1 do\n        range[i - start + 1] = arr[i]\n    end\n\n    if type((--[[---@type std__Packed<V>]] arr).n) == 'number' then\n        (--[[---@type std__Packed<V>]] range).n = finish - start + 1\n    end\n\n    return range\nend\n\n---@overload fun<V>(arr: std__Packed<V>): std__Packed<V>\n---@generic V\n---@param arr V[]\n---@return V[], number\nfunction TableUtils.unique(arr)\n    ---@type V[]\n    local unique = {}\n    local i = 0\n\n    for _, value in ipairs(arr) do\n        if not TableUtils.find(unique, value) then\n            i = i + 1\n            unique[i] = value\n        end\n    end\n\n    return unique, i\nend\n\nlocal TYPE_STRINGIFIERS = {\n    ['nil'] = function(_) return 'nil' end,\n    boolean = function(v) return tostring(v) end,\n    number = function(v) return tostring(v) end,\n    string = function(v) return \"'\" .. v .. \"'\" end,\n    userdata = function(_) return 'userdata' end,\n    ['function'] = function(_) return 'function' end,\n    thread = function(_) return 'thread' end,\n    table = function(v) return tostring(v) end,\n}\n\n---@overload fun(tab: table): string\n---@overload fun(tab: table, recursive: boolean): string\n---@param tab table\n---@param recursive boolean\n---@param depth number\n---@return string\nfunction TableUtils.dump(tab, recursive, depth)\n    depth = depth or 1\n\n    local indentation = string.rep('  ', depth)\n    local str = '{'\n\n    ---@type table<number, nil | boolean>\n    local ordered_keys = {}\n\n    for i, v in ipairs(--[[---@type any[] ]] tab) do\n        ordered_keys[i] = true\n        str = str .. '\\n' .. indentation .. '[' .. i .. '] = '\n\n        if recursive and type(v) == 'table' then\n            str = str .. TableUtils.dump(v, true, depth + 1) .. ','\n        else\n            local a = TYPE_STRINGIFIERS['nil']\n            str = str .. TYPE_STRINGIFIERS[type(v)](v) .. ','\n        end\n    end\n\n    for k, v in pairs(tab) do\n        if not ordered_keys[--[[---@type number]] k] then\n            str = str .. '\\n' .. indentation .. '[' .. TYPE_STRINGIFIERS[type(k)](k) .. '] = '\n\n            if recursive and type(v) == 'table' then\n                str = str .. TableUtils.dump(v, true, depth + 1) .. ','\n            else\n                str = str .. TYPE_STRINGIFIERS[type(v)](v) .. ','\n            end\n        end\n    end\n\n    str = str .. '\\n' .. string.rep('  ', depth - 1) .. '}'\n\n    return str\nend\n\nreturn TableUtils\n\nend)\n__bundle_register(\"ge_tts.SaveManager\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal Logger = require(\"ge_tts.Logger\")\nlocal TableUtils = require(\"ge_tts.TableUtils\")\n\nlocal SAVE_STATE_IDENTIFIER = \"__ge_tts_save__\"\n\n---@class ge_tts__SaveManager\nlocal SaveManager = {}\n\n---@shape __ge_tts__SaveManager_Callbacks\n---@field onLoads (fun(savedState: string): void)[]\n---@field onSave nil | (fun(): nil | string)\n\nlocal ORIGINAL_PSEUDO_MODULE_NAME = '__originalSavedState'\n\n---@type table<string, __ge_tts__SaveManager_Callbacks>\nlocal callbacks = {}\n\nlocal originalOnSave = --[[---@type nil | fun(): string]] _G.onSave\nlocal originalOnLoad = --[[---@type nil | fun(savedState: string): void]] _G.onLoad\n\n---@param moduleName string\n---@return __ge_tts__SaveManager_Callbacks\nlocal function getModuleCallbacks(moduleName)\n    local moduleCallbacks = callbacks[moduleName]\n\n    if not moduleCallbacks then\n        moduleCallbacks = {onLoads = {}}\n        callbacks[moduleName] = moduleCallbacks\n    end\n\n    return moduleCallbacks\nend\n\n---@param moduleName string\n---@param savedState string\nlocal function executeOnLoads(moduleName, savedState)\n    if moduleName == ORIGINAL_PSEUDO_MODULE_NAME and originalOnLoad then\n        (--[[---@not nil]] originalOnLoad)(savedState)\n    else\n        local onLoads = TableUtils.copy(getModuleCallbacks(moduleName).onLoads) -- Copying because callbacks may modify onLoads whilst we iterate.\n\n        for _, onLoad in ipairs(onLoads) do\n            onLoad(savedState)\n        end\n    end\nend\n\n---\n---Registers onSave for the specified moduleName. moduleName must be unique.\n---\n---Any onLoad registered for the same moduleName will be called with the savedState returned from onSave. This allows\n---several Lua modules/files to independently maintain their own savedState.\n---\n---@param moduleName string\n---@param onSave fun(): nil | string\nfunction SaveManager.registerOnSave(moduleName, onSave)\n    Logger.assert(type(moduleName) == 'string' and moduleName ~= '', 'moduleName must be specified')\n\n    local moduleCallbacks = getModuleCallbacks(moduleName)\n\n    Logger.assert(moduleCallbacks.onSave == nil, 'onSave is already registered for module: ' .. moduleName)\n\n    moduleCallbacks.onSave = onSave\nend\n\n\n---\n---Registers onLoad for the specified moduleName. You may have multiple onLoad registered for the same moduleName.\n---\n---The provided onLoad function will only be called with data pertaining to the provided moduleName. This allows Lua\n---modules to independently maintain their own savedState.\n---\n---If the moduleName argument is omitted, the provided onLoad will be called with an empty string. This is useful if you\n---simply want your onLoad callback called when Tabletop Simulator finished loading, but you don't need any saved state.\n---\n---@overload fun(onLoad: (fun(savedState: string): void)): boolean\n---@overload fun(moduleName: string, onLoad: (fun(savedState: string): void)): boolean\n---@param moduleNameOrOnLoad string | fun(savedState: string): void\n---@param nilOrOnLoad nil | fun(savedState: string): void\nfunction SaveManager.registerOnLoad(moduleNameOrOnLoad, nilOrOnLoad)\n    if type(moduleNameOrOnLoad) == 'function' then\n        SaveManager.registerOnLoad('', --[[---@type fun(savedState: string): void]] moduleNameOrOnLoad)\n        return\n    end\n\n    Logger.assert(type(moduleNameOrOnLoad) == 'string', 'moduleName must be a string')\n\n    local moduleName = --[[---@type string]] moduleNameOrOnLoad\n    local moduleCallbacks = getModuleCallbacks(moduleName)\n    local onLoad = --[[---@type fun(savedState: string): void]] nilOrOnLoad\n\n    table.insert(moduleCallbacks.onLoads, onLoad)\nend\n\n---\n---Remove the existing onSave callback for moduleName.\n---\n---Returns true if there was an existing onSave callback and it was removed, or false if there was already no onSave for moduleName.\n---\n---@param moduleName string\n---@return boolean\nfunction SaveManager.removeOnSave(moduleName)\n    local moduleCallbacks = callbacks[moduleName]\n\n    if moduleCallbacks and moduleCallbacks.onSave then\n        moduleCallbacks.onSave = nil\n        return true\n    end\n\n    return false\nend\n\n---@overload fun(onLoad: (fun(savedState: string): void)): boolean\n---@overload fun(moduleName: string, onLoad: (fun(savedState: string): void)): boolean\n---@param moduleNameOrOnLoad string | fun(savedState: string): void\n---@param nilOrOnLoad nil | fun(savedState: string): void\n---@return boolean\nfunction SaveManager.removeOnLoad(moduleNameOrOnLoad, nilOrOnLoad)\n    if type(moduleNameOrOnLoad) == 'function' then\n        return SaveManager.removeOnLoad('', --[[---@type fun(savedState: string): void]] moduleNameOrOnLoad)\n    end\n\n    Logger.assert(type(moduleNameOrOnLoad) == 'string', 'SaveManager moduleName must be a string')\n\n    local moduleName = --[[---@type string]] moduleNameOrOnLoad\n    local moduleCallbacks = callbacks[moduleName]\n    local onLoad = nilOrOnLoad\n\n    if moduleCallbacks then\n        for i, existingOnLoad in ipairs(moduleCallbacks.onLoads) do\n            if existingOnLoad == onLoad then\n                table.remove(moduleCallbacks.onLoads, i)\n                return true\n            end\n        end\n    end\n\n    return false\nend\n\n---@return string\nfunction onSave()\n    local savedState = SAVE_STATE_IDENTIFIER\n\n    for moduleName, moduleCallbacks in pairs(callbacks) do\n        if moduleCallbacks.onSave then\n            local moduleSavedState = (--[[---@not nil]]  moduleCallbacks.onSave)()\n\n            if moduleSavedState ~= nil then\n                Logger.assert(type(moduleSavedState) == 'string', moduleName .. \"'s onSave returned a \" .. type(moduleSavedState) .. ', a string is required.')\n\n                savedState = savedState .. moduleName:len() .. ' ' .. moduleName .. ' ' .. (--[[---@not nil]] moduleSavedState):len() .. ' ' .. moduleSavedState\n            end\n        end\n    end\n\n    if originalOnSave then\n        local originalSavedStated = (--[[---@not nil]] originalOnSave)()\n        savedState = savedState .. ORIGINAL_PSEUDO_MODULE_NAME:len() .. ' ' .. ORIGINAL_PSEUDO_MODULE_NAME .. ' ' .. originalSavedStated:len() .. ' ' .. originalSavedStated\n    end\n\n    return savedState\nend\n\nlocal GE_MODULE_PREFIX = 'ge_tts.'\n\n---@param savedState string\nfunction onLoad(savedState)\n    savedState = savedState or ''\n\n    Logger.assert(savedState == '' or  savedState:sub(1, SAVE_STATE_IDENTIFIER:len()) == SAVE_STATE_IDENTIFIER, \"When working with ge_tts, you must use ge_tts.SaveManager instead of writing directly to script_state.\")\n\n    local savedStateLength = savedState:len()\n    local moduleNameOffset = SAVE_STATE_IDENTIFIER:len() + 1\n    local i = moduleNameOffset\n\n    ---@type table<string, {rangeStart: number, rangeEnd: number}>\n    local moduleStateRanges = {}\n\n    repeat\n        if savedState:sub(i, i) == ' ' then\n            local moduleNameLength = tonumber(savedState:sub(moduleNameOffset, i - 1))\n            local moduleName = savedState:sub(i + 1, i + moduleNameLength)\n            local moduleSizeOffset = i + moduleNameLength + 2\n\n            for j = moduleSizeOffset, savedStateLength do\n                if savedState:sub(j, j) == ' ' then\n                    local moduleStateLength = tonumber(savedState:sub(moduleSizeOffset, j - 1))\n                    local moduleSavedStateEnd = j + moduleStateLength\n\n                    moduleStateRanges[moduleName] = {\n                        rangeStart = j + 1,\n                        rangeEnd = moduleSavedStateEnd\n                    }\n\n                    moduleNameOffset = moduleSavedStateEnd + 1\n                    i = moduleSavedStateEnd + 1\n                    break\n                end\n            end\n        else\n            i = i + 1\n        end\n    until i > savedStateLength\n\n    -- ge_tts listeners execute first\n    for moduleName, _ in pairs(callbacks) do\n        if moduleName:sub(1, GE_MODULE_PREFIX:len()) == GE_MODULE_PREFIX then\n            local stateRange = moduleStateRanges[moduleName]\n\n            if stateRange then\n                local moduleSavedState = savedState:sub(stateRange.rangeStart, stateRange.rangeEnd)\n                executeOnLoads(moduleName, moduleSavedState)\n            else\n                executeOnLoads(moduleName, '')\n            end\n        end\n    end\n\n    for moduleName, _ in pairs(callbacks) do\n        if moduleName:sub(1, GE_MODULE_PREFIX:len()) ~= GE_MODULE_PREFIX then\n            local stateRange = moduleStateRanges[moduleName]\n\n            if stateRange then\n                local moduleSavedState = savedState:sub(stateRange.rangeStart, stateRange.rangeEnd)\n                executeOnLoads(moduleName, moduleSavedState)\n            else\n                executeOnLoads(moduleName, '')\n            end\n        end\n    end\nend\n\nreturn SaveManager\n\nend)\n__bundle_register(\"ge_tts.Logger\", function(require, _LOADED, __bundle_register, __bundle_modules)\n---@class ge_tts__Logger\n\n---@class ge_tts__static_Logger\n---@overload fun(): ge_tts__Logger\nlocal Logger = {}\n\nLogger.ERROR = 1\nLogger.WARNING = 2\nLogger.INFO = 3\nLogger.DEBUG = 4\nLogger.VERBOSE = 5\n\n---@alias ge_tts__Logger_LogLevel 1 | 2 | 3 | 4 | 5\n\n---@type table<ge_tts__Logger_LogLevel, string>\nlocal levelPrefixes = {\n    [Logger.ERROR] = 'ERROR: ',\n    [Logger.WARNING] = 'WARNING: ',\n    [Logger.INFO] = '',\n    [Logger.DEBUG] = '',\n    [Logger.VERBOSE] = '',\n}\n\n---@type ge_tts__Logger_LogLevel\nlocal defaultLogLevel = Logger.DEBUG\n\nsetmetatable(Logger, {\n    __call = function()\n        local self = --[[---@type ge_tts__Logger]] {}\n\n        ---@type ge_tts__Logger_LogLevel\n        local filterLevel = Logger.INFO\n\n        ---@return ge_tts__Logger_LogLevel\n        function self.getFilterLevel()\n            return filterLevel\n        end\n\n        ---@param level ge_tts__Logger_LogLevel | `Logger.ERROR` | `Logger.WARNING` | `Logger.INFO` | `Logger.DEBUG` | `Logger.VERBOSE`\n        function self.setFilterLevel(level)\n            filterLevel = level\n        end\n\n        ---@overload fun(message: string): void\n        ---@param message string\n        ---@param level ge_tts__Logger_LogLevel | `Logger.ERROR` | `Logger.WARNING` | `Logger.INFO` | `Logger.DEBUG` | `Logger.VERBOSE`\n        function self.log(message, level)\n            level = level or defaultLogLevel\n            if level <= filterLevel then\n                print(levelPrefixes[level] .. message)\n            end\n        end\n\n        ---\n        ---If value is false, logs message at level Logger.ERROR and then calls Lua's in-built error(message).\n        ---\n        ---@param value any\n        ---@param message string\n        function self.assert(value, message)\n            if not value then\n                self.log(message, Logger.ERROR)\n                error(message, 2)\n            end\n        end\n\n        return self\n    end\n})\n\nlocal defaultLogger = Logger()\n\n---@param logger ge_tts__Logger\nfunction Logger.setDefaultLogger(logger)\n    defaultLogger = logger\nend\n\nfunction Logger.getDefaultLogger()\n    return defaultLogger\nend\n\n---\n---When calling log() without specifying a log level, messages will log at the provided log level.\n---\n---@param level ge_tts__Logger_LogLevel | `Logger.ERROR` | `Logger.WARNING` | `Logger.INFO` | `Logger.DEBUG` | `Logger.VERBOSE`\nfunction Logger.setDefaultLogLevel(level)\n    defaultLogLevel = level\nend\n\n---\n---Returns the default log level.\n---\n---@return ge_tts__Logger_LogLevel\nfunction Logger.getDefaultLogLevel()\n    return defaultLogLevel\nend\n\n---\n---Logs a message at the specified log level. If level is omitted, the default log level will be used.\n---\n---@overload fun(message: string): void\n---@param message string\n---@param level ge_tts__Logger_LogLevel | `Logger.ERROR` | `Logger.WARNING` | `Logger.INFO` | `Logger.DEBUG` | `Logger.VERBOSE`\nfunction Logger.log(message, level)\n    level = level or defaultLogLevel\n    defaultLogger.log(message, level)\nend\n\n---\n---If value is false, logs message at level Logger.ERROR using the default logger, and then calls Lua's error(message).\n---\n---@param value any\n---@param message string\nfunction Logger.assert(value, message)\n    if not value then\n        defaultLogger.log(message, Logger.ERROR)\n        error(message, 2)\n    end\nend\n\nreturn Logger\n\nend)\n__bundle_register(\"ge_tts.Object\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal Object = {}\n\nObject.Name = {\n    AssetBundle = \"Custom_Assetbundle\",\n    BackgammonBoard = \"backgammon_board\",\n    BackgammonPieceBrown = \"backgammon_piece_brown\",\n    BackgammonPieceWhite = \"backgammon_piece_white\",\n    Bag = \"Bag\",\n    BlockRectangle = \"BlockRectangle\",\n    BlockSquare = \"BlockSquare\",\n    BlockTriangle = \"BlockTriangle\",\n    Board = \"Custom_Board\",\n    Card = \"Card\",\n    CardCustom = \"CardCustom\",\n    CheckerBlack = \"Checker_black\",\n    CheckerBoard = \"Checker_Board\",\n    CheckerRed = \"Checker_red\",\n    CheckerWhite = \"Checker_white\",\n    ChessBishop = \"Chess_Bishop\",\n    ChessBoard = \"Chess_Board\",\n    ChessKing = \"Chess_King\",\n    ChessKnight = \"Chess_Knight\",\n    ChessPawn = \"Chess_Pawn\",\n    ChessQueen = \"Chess_Queen\",\n    ChessRook = \"Chess_Rook\",\n    ChineseCheckersBoard = \"Chinese_Checkers_Board\",\n    ChineseCheckersPiece = \"Chinese_Checkers_Piece\",\n    Chip10 = \"Chip_10\",\n    Chip50 = \"Chip_50\",\n    Chip100 = \"Chip_100\",\n    Chip500 = \"Chip_500\",\n    ChiP1000=\"Chip_1000\",\n    Deck = \"Deck\",\n    DeckCardBotHead = \"Deck_CardBot_Head\",\n    DeckCardBotMain = \"Deck_CardBot_Main\",\n    DeckCustom = \"DeckCustom\",\n    Die4 = \"Die_4\",\n    Die6 = \"Die_6\",\n    Die6Rounded = \"Die_6_Rounded\",\n    Die8 = \"Die_8\",\n    Die10 = \"Die_10\",\n    Die12 = \"Die_12\",\n    Die20 = \"Die_20\",\n    DieCustom = \"Custom_Dice\",\n    DiePiecepack = \"Die_Piecepack\",\n    DigitalClock = \"Digital_Clock\",\n    Domino = \"Domino\",\n    FigurineCardBot = \"Figurine_Card_Bot\",\n    FigurineCustom = \"Figurine_Custom\",\n    FigurineKimiKat = \"Figurine_Kimi_Kat\",\n    FigurineKnil = \"Figurine_Knil\",\n    FigurineMara = \"Figurine_Mara\",\n    FigurineSirLoin = \"Figurine_Sir_Loin\",\n    FigurineZeke = \"Figurine_Zeke\",\n    FigurineZomblor = \"Figurine_Zomblor\",\n    GoBoard = \"Go_Board\",\n    GoGameBowlBlack = \"go_game_bowl_black\",\n    GoGameBowlWhite = \"go_game_bowl_white\",\n    GoGamePieceBlack = \"go_game_piece_black\",\n    GoGamePieceWhite = \"go_game_piece_white\",\n    InfiniteBag = \"Infinite_Bag\",\n    MahjongTile = \"Mahjong_Tile\",\n    MetalBall = \"Ball\",\n    Model = \"Custom_Model\",\n    Pachisiboard = \"Pachisi_board\",\n    PlayerPawn = \"PlayerPawn\",\n    Quarter = \"Quarter\",\n    ReversiBoard = \"reversi_board\",\n    ReversiChip = \"reversi_chip\",\n    RPGBear = \"rpg_BEAR\",\n    RPGChimera = \"rpg_CHIMERA\",\n    RPGCyclop = \"rpg_CYCLOP\",\n    RPGDragonide = \"rpg_DRAGONIDE\",\n    RPGEvilWatcher = \"rpg_EVIL_WATCHER\",\n    RPGGhoul = \"rpg_GHOUL\",\n    RPGGiantViper = \"rpg_GIANT_VIPER\",\n    RPGGoblin = \"rpg_GOBLIN\",\n    RPGGolem = \"rpg_GOLEM\",\n    RPGGriffon = \"rpg_GRIFFON\",\n    RPGHydra = \"rpg_HYDRA\",\n    RPGKobold = \"rpg_KOBOLD\",\n    RPGLizardWarrior = \"rpg_LIZARD_WARRIOR\",\n    RPGManticora = \"rpg_MANTICORA\",\n    RPGMummy = \"rpg_MUMMY\",\n    RPGOgre = \"rpg_OGRE\",\n    RPGOrc = \"rpg_ORC\",\n    RPGRat = \"rpg_RAT\",\n    RPGSkeletonKnight = \"rpg_SKELETON_KNIGHT\",\n    RPGTreeEnt = \"rpg_TREE_ENT\",\n    RPGTroll = \"rpg_TROLL\",\n    RPGVampire = \"rpg_VAMPIRE\",\n    RPGWerewolf = \"rpg_WEREWOLF\",\n    RPGWolf = \"rpg_WOLF\",\n    RPGWyvern = \"rpg_WYVERN\",\n    ScriptingTrigger = \"ScriptingTrigger\",\n    Tablet = \"Tablet\",\n    Tile = \"Custom_Tile\",\n    TilesetBarrel = \"Tileset_Barrel\",\n    TilesetChair = \"Tileset_Chair\",\n    TilesetChest = \"Tileset_Chest\",\n    TilesetCorner = \"Tileset_Corner\",\n    TilesetFloor = \"Tileset_Floor\",\n    TilesetRock = \"Tileset_Rock\",\n    TilesetTable = \"Tileset_Table\",\n    TilesetTree = \"Tileset_Tree\",\n    TilesetWall = \"Tileset_Wall\",\n    Token = \"Custom_Token\",\n}\n\nObject.Tag = {\n    BackgammonPiece = \"Backgammon Piece\",\n    Bag = \"Bag\",\n    Block = \"Block\",\n    Board = \"Board\",\n    Calculator = \"Calculator\",\n    Card = \"Card\",\n    Checker = \"Checker\",\n    Chess = \"Chess\",\n    Chip = \"Chip\",\n    Clock = \"Clock\",\n    Coin = \"Coin\",\n    Counter = \"Counter\",\n    Deck = \"Deck\",\n    Die = \"Dice\",\n    Domino = \"Domino\",\n    Figurine = \"Figurine\",\n    Fog = \"Fog\",\n    FogOfWar = \"FogOfWar\",\n    Generic = \"Generic\",\n    GoPiece = \"GoPiece\",\n    Hand = \"Hand\",\n    Infinite = \"Infinite\",\n    InventoryBackground = \"InventoryBackground\",\n    InventoryBotBackground = \"InventoryBotBG\",\n    InventoryItemBlank = \"InventoryItemBlank\",\n    InventoryTopBackground = \"InventoryTopBG\",\n    Jigsaw = \"Jigsaw\",\n    JigsawBox = \"Jigsaw Box\",\n    MP3 = \"Mp3\",\n    Notecard = \"Notecard\",\n    Pointer = \"Pointer\",\n    Randomize = \"Randomize\",\n    RPGFigurine = \"rpgFigurine\",\n    Scripting = \"Scripting\",\n    Stack = \"Stack\",\n    Superfight = \"Superfight\",\n    Surface = \"Surface\",\n    Tablet = \"Tablet\",\n    Text = \"3D Text\",\n    Tile = \"Tile\",\n    Tileset = \"Tileset\",\n    VRUI = \"VR UI\",\n}\n\nObject.AssetBundleType = {\n    Generic = 0,\n    Coin = 1,\n    Bag = 2,\n    Figurine = 3,\n    Board = 4,\n    Infinite = 5,\n    Dice = 6,\n}\n\nObject.CardType = {\n    RectangleRounded = 0,\n    Rectangle = 1,\n    HexRounded = 2,\n    Hex = 3,\n    Circle = 4,\n}\n\nObject.DieType = {\n    D4 = 0,\n    D6 = 1,\n    D8 = 2,\n    D10 = 3,\n    D12 = 4,\n    D20 = 5,\n}\n\nObject.ModelType = {\n    Generic = 0,\n    Coin = 1,\n    Bag = 2,\n    Figurine = 3,\n    Board = 4,\n    Infinite = 5,\n    Dice = 6,\n    Chip = 7,\n}\n\nObject.TileType = {\n    Box = 0,\n    Hex = 1,\n    Circle = 2,\n    Rounded = 3,\n}\n\nreturn Object\n\nend)\n__bundle_register(\"ge_tts.Json\", function(require, _LOADED, __bundle_register, __bundle_modules)\n-- JSON encoding of Color presently fails due to a bug in Color. Fortunately, we can patch Color to fix it.\nrequire(\"ge_tts.GlobalPatches\")\n\nlocal Coroutine = require(\"ge_tts.Coroutine\")\nlocal TableUtils = require(\"ge_tts.TableUtils\")\n\nlocal LunaJsonDecoder = require(\"ge_tts.lunajson.decoder\")\nlocal LunaJsonEncoder = require(\"ge_tts.lunajson.encoder\")\nlocal LunaJsonSax = require(\"ge_tts.lunajson.sax\")\n\n---@class ge_tts__JsonNull\nlocal NULL = setmetatable({}, {\n    __index = {},\n    __newindex = function() error(\"Attempt to modify JSON.null()\") end,\n    __metatable = false\n})\n\n---@class ge_tts__Json\nlocal Json = {}\n\n---@return ge_tts__JsonNull\nfunction Json.null()\n    return NULL\nend\n\n---@alias ge_tts__JsonObject table<string, ge_tts__JsonValue>\n---@alias ge_tts__JsonArray ge_tts__JsonValue[]\n---@alias ge_tts__JsonContainer ge_tts__JsonObject | ge_tts__JsonArray\n---@alias ge_tts__JsonValue ge_tts__JsonContainer | number | string | boolean | nil | ge_tts__JsonNull\n\n---@alias __ge_tts__JsonNodeTypeObject 0\n---@alias __ge_tts__JsonNodeTypeArray 1\n---@alias __ge_tts__JsonNodeTypeKey 2\n\n---@type __ge_tts__JsonNodeTypeObject\nlocal NODE_OBJECT = 0\n\n---@type __ge_tts__JsonNodeTypeArray\nlocal NODE_ARRAY = 1\n\n---@type __ge_tts__JsonNodeTypeKey\nlocal NODE_KEY = 2\n\n---@alias __ge_tts__JsonNodeType __ge_tts__JsonNodeTypeObject | __ge_tts__JsonNodeTypeArray | __ge_tts__JsonNodeTypeKey\n\n---@alias __ge_tts__JsonObjectNode {[1]: __ge_tts__JsonNodeTypeObject, [2]: ge_tts__JsonObject}\n---@alias __ge_tts__JsonArrayNode {[1]: __ge_tts__JsonNodeTypeArray, [2]: ge_tts__JsonArray, [3]: number}\n---@alias __ge_tts__JsonKeyNode {[1]: __ge_tts__JsonNodeTypeKey, [2]: string }\n\n\n---@alias __ge_tts__JsonNode __ge_tts__JsonObjectNode | __ge_tts__JsonArrayNode | __ge_tts__JsonKeyNode\n\n---@shape ge_tts__Json_DecodeOptions\n---@field encodeArrayLength nil | boolean @Default false. When true, array lengths are written to an `n` field on the array (i.e. std__Packed). Thus an empty array can be discerned from an empty table.\n---@field nullIdentification nil | boolean @Default true. When true, null values in an array/object are represented by JSON.null() rather than being omitted.\n\n---@shape ge_tts__Json_DecodeAsyncOptions : ge_tts__Json_DecodeOptions\n---@field onCompletion fun(data: any): void\n---@field onError fun(message: string): void\n---@field charactersPerChunk nil | number @Default 2048 (2 KiB)\n---@field framesBetweenChunks nil | number @Default 1\n\n---@type ge_tts__Json_DecodeOptions\nlocal defaultDecodeOptions = {\n    encodeArrayLength = false,\n    nullIdentification = true,\n}\n\n--- Sets the default decoding options used by decode and decodeAsync when called with options omitted.\n---@param decodeOptions ge_tts__Json_DecodeOptions\nfunction Json.setDefaultDecodeOptions(decodeOptions)\n    defaultDecodeOptions = decodeOptions\nend\n\n--- Parses JSON in a pseudo-async fashion using co-operative multi-tasking (i.e. coroutines).\n---\n--- The parser will only do a limited amount of work each frame before handing off processing back to TTS, thus we\n--- don't freeze the game when parsing large JSON.\n---\n--- Return value is a function that can be called to cancel decoding if it is yet to complete.\n---@param json string\n---@param options ge_tts__Json_DecodeAsyncOptions\n---@return fun(): void\nfunction Json.decodeAsync(json, options)\n    local cancelled = false\n\n    options = TableUtils.merge(--[[---@type ge_tts__Json_DecodeAsyncOptions]] defaultDecodeOptions, options)\n\n    Coroutine.start(function()\n        ---@type __ge_tts__JsonNode[]\n        local stack = {}\n\n        ---@type nil | __ge_tts__JsonNode\n        local currentNode\n\n        ---@type ge_tts__JsonValue\n        local result\n\n        ---@param value ge_tts__JsonValue\n        local function addValue(value)\n            if currentNode then\n                local nodeType = (--[[---@not nil]] currentNode)[1]\n\n                if value == nil and options.nullIdentification then\n                    value = Json.null()\n                end\n\n                if nodeType == NODE_KEY then\n                    local key = (--[[---@type __ge_tts__JsonKeyNode]] currentNode)[2]\n\n                    local parentNode = --[[---@type __ge_tts__JsonObjectNode]] table.remove(stack)\n                    local parentObject = parentNode[2]\n                    parentObject[key] = value\n\n                    currentNode = parentNode\n                elseif nodeType == NODE_ARRAY then\n                    local arrayNode = --[[---@type __ge_tts__JsonArrayNode]] currentNode\n\n                    local array = arrayNode[2]\n                    arrayNode[3] = arrayNode[3] + 1 -- Update length\n                    array[arrayNode[3]] = value\n                end\n            else\n                result = value\n            end\n        end\n\n        ---@type lunajson__SaxHandler\n        local handler = {\n            startobject = function()\n                if currentNode then\n                    table.insert(stack, --[[---@not nil]] currentNode)\n                end\n\n                currentNode = {NODE_OBJECT , {}}\n            end,\n            ---@param key string\n            key = function(key)\n                table.insert(stack, --[[---@not nil]] currentNode)\n                currentNode = {NODE_KEY, key}\n            end,\n            endobject = function()\n                local objectNode = (--[[---@type __ge_tts__JsonObjectNode]] currentNode)\n                currentNode = table.remove(stack)\n                addValue(objectNode[2])\n            end,\n            startarray = function()\n                if currentNode then\n                    table.insert(stack, --[[---@not nil]] currentNode)\n                end\n\n                currentNode = {NODE_ARRAY , {}, 0}\n            end,\n            endarray = function()\n                local objectNode = (--[[---@type __ge_tts__JsonArrayNode]] currentNode)\n                local array = objectNode[2]\n                currentNode = table.remove(stack)\n\n                if options.encodeArrayLength then\n                    (--[[---@type std__Packed<ge_tts__JsonValue>]] array).n = objectNode[3]\n                end\n\n                addValue(array)\n            end,\n            string = addValue,\n            number = addValue,\n            boolean = addValue,\n            null = function()\n                addValue(nil)\n            end,\n        }\n\n        ---@type number\n        local charactersPerChunk = 0\n\n        if options.charactersPerChunk then\n            charactersPerChunk = --[[---@not nil]] options.charactersPerChunk\n        end\n\n        if charactersPerChunk <= 0 then\n            charactersPerChunk = 2048\n        end\n\n        ---@type number\n        local framesBetweenChunks\n\n        if options.framesBetweenChunks and framesBetweenChunks > 0 then\n            framesBetweenChunks = --[[---@not nil]] options.framesBetweenChunks\n        else\n            framesBetweenChunks = 1\n        end\n\n        local offset = 1\n        local length = #json\n\n        local function feed()\n            local characterCount = math.min(length - offset + 1, charactersPerChunk)\n\n            if characterCount == 0 or cancelled then\n                return nil\n            end\n\n            Coroutine.yieldFrames(framesBetweenChunks, function(message)\n                if not cancelled then\n                    options.onError(message)\n                end\n            end)\n\n            local nextOffset = offset + characterCount\n            local substring = json:sub(offset, nextOffset - 1)\n            offset = nextOffset\n            return substring\n        end\n\n        local parser = --[[---@type {run: fun(): void}]] LunaJsonSax.newparser(feed, handler)\n        parser.run()\n\n        if not cancelled then\n            options.onCompletion(result)\n        end\n    end)\n\n    return function()\n        cancelled = true\n    end\nend\n\nlocal decode = LunaJsonDecoder()\n\n---@overload fun(json: string): any\n---@param json string\n---@param options nil | ge_tts__Json_DecodeOptions\n---@return any\nfunction Json.decode(json, options)\n    local decodeOptions = TableUtils.merge(defaultDecodeOptions, --[[---@not nil]] options or {})\n    local nullValue = decodeOptions.nullIdentification and Json.null() or nil\n    return (decode(json, 0, nullValue, decodeOptions.encodeArrayLength or false))\nend\n\nlocal encode = LunaJsonEncoder()\n\n---@param value any\n---@return string\nfunction Json.encode(value)\n    return encode(value, Json.null())\nend\n\n--- Fills gaps (up to the specified length) in sparseArray with Json.null(), then returns it.\n---@generic T\n---@generic N : number\n---@param sparseArray table<N, nil | T>\n---@param length number\n---@return (T | ge_tts__JsonNull)[]\nfunction Json.nullFillSparseArray(sparseArray, length)\n    for i = 1, length do\n        if type((--[[---@type T[] ]] sparseArray)[i]) == 'nil' then\n            (--[[---@type (T | ge_tts__JsonNull)[] ]] sparseArray)[i] = Json.null()\n        end\n    end\n\n    return --[[---@type (T | ge_tts__JsonNull)[] ]] sparseArray\nend\n\nreturn Json\n\nend)\n__bundle_register(\"ge_tts.lunajson.sax\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal setmetatable, tonumber, tostring =\n      setmetatable, tonumber, tostring\nlocal floor, inf =\n      math.floor, math.huge\nlocal byte, char, find, gsub, match, sub =\n      string.byte, string.char, string.find, string.gsub, string.match, string.sub\n\nlocal function _parse_error(pos, errmsg)\n\terror(\"parse error at \" .. pos .. \": \" .. errmsg, 2)\nend\n\nlocal f_str_ctrl_pat = '[^\\32-\\255]'\nlocal type, unpack = type, table.unpack\n\nlocal _ENV = nil\n\n---@class lunajson__SaxParser\n---@field run fun(): void\n---@field tryc fun(): nil | number\n---@field read fun(n: number): string\n---@field tellpos fun(): number\n\n---@shape lunajson__SaxHandler\n---@field startobject nil | fun(): void\n---@field key nil | fun(key: string): void\n---@field endobject nil | fun(): void\n---@field startarray nil | fun(): void\n---@field endarray nil | fun(): void\n---@field string nil | fun(value: string): void\n---@field number nil | fun(value: number): void\n---@field boolean nil | fun(value: boolean): void\n---@field null nil | fun(value: nil): void\n\nlocal function nop() end\n\n---@overload fun(src: string, saxtbl: lunajson__SaxHandler): lunajson__SaxParser\n---@param src fun(): nil | string\n---@param saxtbl lunajson__SaxHandler\n---@return lunajson__SaxParser\nlocal function newparser(src, saxtbl)\n\t---@type string, (fun(): void), number\n\tlocal json, jsonnxt, rec_depth\n\tlocal jsonlen, pos, acc = 0, 1, 0\n\n\t-- `f` is the temporary for dispatcher[c] and\n\t-- the dummy for the first return value of `find`\n\t---@type {[number]: fun(): void}, fun(): void\n\tlocal dispatcher, f\n\n\t-- initialize\n\tif type(src) == 'string' then\n\t\tjson = --[[---@type string]] src\n\t\tjsonlen = #json\n\t\tjsonnxt = function()\n\t\t\tjson = ''\n\t\t\tjsonlen = 0\n\t\t\tjsonnxt = nop\n\t\tend\n\telse\n\t\tjsonnxt = function()\n\t\t\tacc = acc + jsonlen\n\t\t\tpos = 1\n\n\t\t\trepeat\n\t\t\t\t-- Don't like this cast, it's wrong. Ideally we'd have a local\n\t\t\t\t-- var that's nillable, but lunajson is heavily optimized, so we\n\t\t\t\t-- make do.\n\t\t\t\tjson = --[[---@not nil]] src()\n\n\t\t\t\tif not json then\n\t\t\t\t\tjson = ''\n\t\t\t\t\tjsonlen = 0\n\t\t\t\t\tjsonnxt = nop\n\t\t\t\t\treturn\n\t\t\t\tend\n\n\t\t\t\tjsonlen = #json\n\t\t\tuntil jsonlen > 0\n\t\tend\n\t\tjsonnxt()\n\tend\n\n\tlocal sax_startobject = saxtbl.startobject or nop\n\tlocal sax_key = saxtbl.key or nop\n\tlocal sax_endobject = saxtbl.endobject or nop\n\tlocal sax_startarray = saxtbl.startarray or nop\n\tlocal sax_endarray = saxtbl.endarray or nop\n\tlocal sax_string = saxtbl.string or nop\n\tlocal sax_number = saxtbl.number or nop\n\tlocal sax_boolean = saxtbl.boolean or nop\n\tlocal sax_null = saxtbl.null or nop\n\n\t--[[\n\t\tHelper\n\t--]]\n\tlocal function tryc()\n\t\tlocal c = byte(json, pos)\n\t\tif not c then\n\t\t\tjsonnxt()\n\t\t\tc = byte(json, pos)\n\t\tend\n\t\treturn c\n\tend\n\n\tlocal function parse_error(errmsg)\n\t\treturn _parse_error(acc + pos, errmsg)\n\tend\n\n\tlocal function tellc()\n\t\treturn tryc() or parse_error(\"unexpected termination\")\n\tend\n\n\tlocal function spaces()  -- skip spaces and prepare the next char\n\t\twhile true do\n\t\t\tpos = --[[---@type number]] match(json, '^[ \\n\\r\\t]*()', pos)\n\t\t\tif pos <= jsonlen then\n\t\t\t\treturn\n\t\t\tend\n\t\t\tif jsonlen == 0 then\n\t\t\t\tparse_error(\"unexpected termination\")\n\t\t\tend\n\t\t\tjsonnxt()\n\t\tend\n\tend\n\n\t--[[\n\t\tInvalid\n\t--]]\n\tlocal function f_err()\n\t\tparse_error('invalid value')\n\tend\n\n\t--[[\n\t\tConstants\n\t--]]\n\t-- fallback slow constants parser\n\t---@overload fun(target: string, targetlen: number, ret: nil, sax_f: fun(value: nil): void): void\n\t---@overload fun(target: string, targetlen: number, ret: true, sax_f: fun(value: true): void): void\n\t---@overload fun(target: string, targetlen: number, ret: false, sax_f: fun(value: false): void): void\n\t---@param target string\n\t---@param targetlen number\n\t---@param ret nil | boolean\n\t---@param sax_f fun(value: nil | boolean): void\n\tlocal function generic_constant(target, targetlen, ret, sax_f)\n\t\tfor i = 1, targetlen do\n\t\t\tlocal c = tellc()\n\t\t\tif byte(target, i) ~= c then\n\t\t\t\tparse_error(\"invalid char\")\n\t\t\tend\n\t\t\tpos = pos+1\n\t\tend\n\t\tsax_f(ret)\n\tend\n\n\t-- null\n\tlocal function f_nul()\n\t\tif sub(json, pos, pos+2) == 'ull' then\n\t\t\tpos = pos+3\n\t\t\tsax_null(nil)\n\t\t\treturn\n\t\tend\n\t\tgeneric_constant('ull', 3, nil, sax_null)\n\tend\n\n\t-- false\n\tlocal function f_fls()\n\t\tif sub(json, pos, pos+3) == 'alse' then\n\t\t\tpos = pos+4\n\t\t\tsax_boolean(false)\n\t\t\treturn\n\t\tend\n\t\tgeneric_constant('alse', 4, false, sax_boolean)\n\tend\n\n\t-- true\n\tlocal function f_tru()\n\t\tif sub(json, pos, pos+2) == 'rue' then\n\t\t\tpos = pos+3\n\t\t\tsax_boolean(true)\n\t\t\treturn\n\t\tend\n\t\tgeneric_constant('rue', 3, true, sax_boolean)\n\tend\n\n\t--[[\n\t\tNumbers\n\t\tConceptually, the longest prefix that matches to `[-+.0-9A-Za-z]+` (in regexp)\n\t\tis captured as a number and its conformance to the JSON spec is checked.\n\t--]]\n\t-- deal with non-standard locales\n\tlocal radixmark = --[[---@type string]] match(tostring(0.5), '[^0-9]')\n\tlocal fixedtonumber = tonumber\n\tif radixmark ~= '.' then\n\t\tif find(radixmark, '%W') then\n\t\t\tradixmark = '%' .. radixmark\n\t\tend\n\t\tfixedtonumber = function(s)\n\t\t\treturn tonumber((gsub(s, '.', radixmark)))\n\t\tend\n\tend\n\n\tlocal function number_error()\n\t\treturn parse_error('invalid number')\n\tend\n\n\t-- fallback slow parser\n\tlocal function generic_number(mns)\n\t\t---@type (nil | number)[]\n\t\tlocal buf = {}\n\t\tlocal i = 1\n\t\tlocal is_int = true\n\n\t\tlocal c = byte(json, pos)\n\t\tpos = pos+1\n\n\t\tlocal function nxt()\n\t\t\tbuf[i] = c\n\t\t\ti = i+1\n\t\t\tc = tryc()\n\t\t\tpos = pos+1\n\t\tend\n\n\t\tif c == 0x30 then\n\t\t\tnxt()\n\t\t\tif c and 0x30 <= c and c < 0x3A then\n\t\t\t\tnumber_error()\n\t\t\tend\n\t\telse\n\t\t\trepeat nxt() until not (c and 0x30 <= c and c < 0x3A)\n\t\tend\n\t\tif c == 0x2E then\n\t\t\tis_int = false\n\t\t\tnxt()\n\t\t\tif not (c and 0x30 <= c and c < 0x3A) then\n\t\t\t\tnumber_error()\n\t\t\tend\n\t\t\trepeat nxt() until not (c and 0x30 <= c and c < 0x3A)\n\t\tend\n\t\tif c == 0x45 or c == 0x65 then\n\t\t\tis_int = false\n\t\t\tnxt()\n\t\t\tif c == 0x2B or c == 0x2D then\n\t\t\t\tnxt()\n\t\t\tend\n\t\t\tif not (c and 0x30 <= c and c < 0x3A) then\n\t\t\t\tnumber_error()\n\t\t\tend\n\t\t\trepeat nxt() until not (c and 0x30 <= c and c < 0x3A)\n\t\tend\n\t\tif c and (0x41 <= c and c <= 0x5B or\n\t\t          0x61 <= c and c <= 0x7B or\n\t\t          c == 0x2B or c == 0x2D or c == 0x2E) then\n\t\t\tnumber_error()\n\t\tend\n\t\tpos = pos-1\n\n\t\tlocal num = fixedtonumber(char(unpack(buf)))\n\t\tif mns then\n\t\t\tnum = -num\n\t\tend\n\t\tsax_number(--[[---@not nil]] num)\n\tend\n\n\t-- `0(\\.[0-9]*)?([eE][+-]?[0-9]*)?`\n\tlocal function f_zro(mns)\n\t\t---@type string, number | string\n\t\tlocal num, c = --[[---@type string, string]] match(json, '^(%.?[0-9]*)([-+.A-Za-z]?)', pos)  -- skipping 0\n\n\t\tif num == '' then\n\t\t\tif pos > jsonlen then\n\t\t\t\tpos = pos - 1\n\t\t\t\tgeneric_number(mns)\n\t\t\t\treturn\n\t\t\tend\n\t\t\tif c == '' then\n\t\t\t\tif mns then\n\t\t\t\t\tsax_number(-0.0)\n\t\t\t\t\treturn\n\t\t\t\tend\n\t\t\t\tsax_number(0)\n\t\t\t\treturn\n\t\t\tend\n\n\t\t\tif c == 'e' or c == 'E' then\n\t\t\t\tnum, c = --[[---@type string, string]] match(json, '^([^eE]*[eE][-+]?[0-9]+)([-+.A-Za-z]?)', pos)\n\t\t\t\tif c == '' then\n\t\t\t\t\tpos = pos + #num\n\t\t\t\t\tif pos > jsonlen then\n\t\t\t\t\t\tpos = pos - #num - 1\n\t\t\t\t\t\tgeneric_number(mns)\n\t\t\t\t\t\treturn\n\t\t\t\t\tend\n\t\t\t\t\tif mns then\n\t\t\t\t\t\tsax_number(-0.0)\n\t\t\t\t\t\treturn\n\t\t\t\t\tend\n\t\t\t\t\tsax_number(0.0)\n\t\t\t\t\treturn\n\t\t\t\tend\n\t\t\tend\n\t\t\tpos = pos-1\n\t\t\tgeneric_number(mns)\n\t\t\treturn\n\t\tend\n\n\t\tif byte(num) ~= 0x2E or byte(num, -1) == 0x2E then\n\t\t\tpos = pos-1\n\t\t\tgeneric_number(mns)\n\t\t\treturn\n\t\tend\n\n\t\tif c ~= '' then\n\t\t\tif c == 'e' or c == 'E' then\n\t\t\t\tnum, c = --[[---@type string, string]] match(json, '^([^eE]*[eE][-+]?[0-9]+)([-+.A-Za-z]?)', pos)\n\t\t\tend\n\t\t\tif c ~= '' then\n\t\t\t\tpos = pos-1\n\t\t\t\tgeneric_number(mns)\n\t\t\t\treturn\n\t\t\tend\n\t\tend\n\n\t\tpos = pos + #num\n\t\tif pos > jsonlen then\n\t\t\tpos = pos - #num - 1\n\t\t\tgeneric_number(mns)\n\t\t\treturn\n\t\tend\n\t\tc = --[[---@not nil]] fixedtonumber(num)\n\n\t\tif mns then\n\t\t\tc = -c\n\t\tend\n\t\tsax_number(--[[---@type number]] c)\n\t\treturn\n\tend\n\n\t-- `[1-9][0-9]*(\\.[0-9]*)?([eE][+-]?[0-9]*)?`\n\tlocal function f_num(mns)\n\t\tpos = pos-1\n\n\t\t---@type string, string | number\n\t\tlocal num, c = --[[---@type string, string]] match(json, '^([0-9]+%.?[0-9]*)([-+.A-Za-z]?)', pos)\n\t\tif byte(num, -1) == 0x2E then  -- error if ended with period\n\t\t\tgeneric_number(mns)\n\t\t\treturn\n\t\tend\n\n\t\tif c ~= '' then\n\t\t\tif c ~= 'e' and c ~= 'E' then\n\t\t\t\tgeneric_number(mns)\n\t\t\t\treturn\n\t\t\tend\n\t\t\tnum, c = --[[---@type string, string]] match(json, '^([^eE]*[eE][-+]?[0-9]+)([-+.A-Za-z]?)', pos)\n\t\t\tif not num or c ~= '' then\n\t\t\t\tgeneric_number(mns)\n\t\t\t\treturn\n\t\t\tend\n\t\tend\n\n\t\tpos = pos + #num\n\t\tif pos > jsonlen then\n\t\t\tpos = pos - #num\n\t\t\tgeneric_number(mns)\n\t\t\treturn\n\t\tend\n\t\tc = --[[---@not nil]] fixedtonumber(num)\n\n\t\tif mns then\n\t\t\tc = -c\n\t\tend\n\t\tsax_number(--[[---@type number]] c)\n\tend\n\n\t-- skip minus sign\n\tlocal function f_mns()\n\t\tlocal c = (byte(json, pos)) or tellc()\n\t\tif c then\n\t\t\tpos = pos+1\n\t\t\tif c > 0x30 then\n\t\t\t\tif c < 0x3A then\n\t\t\t\t\tf_num(true)\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif c > 0x2F then\n\t\t\t\t\tf_zro(true)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tparse_error(\"invalid number\")\n\tend\n\n\t--[[\n\t\tStrings\n\t--]]\n\tlocal f_str_hextbl = --[[---@type {[number]: number, __index: fun(): number}]] {\n\t\t0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,\n\t\t0x8, 0x9, inf, inf, inf, inf, inf, inf,\n\t\tinf, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, inf,\n\t\tinf, inf, inf, inf, inf, inf, inf, inf,\n\t\tinf, inf, inf, inf, inf, inf, inf, inf,\n\t\tinf, inf, inf, inf, inf, inf, inf, inf,\n\t\tinf, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,\n\t\t__index = function()\n\t\t\treturn inf\n\t\tend\n\t}\n\tsetmetatable(f_str_hextbl, f_str_hextbl)\n\n\tlocal f_str_escapetbl = {\n\t\t['\"']  = '\"',\n\t\t['\\\\'] = '\\\\',\n\t\t['/']  = '/',\n\t\t['b']  = '\\b',\n\t\t['f']  = '\\f',\n\t\t['n']  = '\\n',\n\t\t['r']  = '\\r',\n\t\t['t']  = '\\t',\n\t\t__index = function()\n\t\t\tparse_error(\"invalid escape sequence\")\n\t\tend\n\t}\n\tsetmetatable(f_str_escapetbl, f_str_escapetbl)\n\n\tlocal function surrogate_first_error()\n\t\treturn parse_error(\"1st surrogate pair byte not continued by 2nd\")\n\tend\n\n\tlocal f_str_surrogate_prev = 0\n\n\t---@overload fun(ch: string, ucode: string): string\n\t---@param ch '\"' | '\\\\' | '/' | 'b' | 'f' | 'n' | 'r' | 't' | 'u'\n\t---@param ucode number\n\t---@return string\n\tlocal function f_str_subst(ch, ucode)\n\t\tif ch == 'u' then\n\t\t\tlocal c1, c2, c3, c4, rest = --[[---@not nil, nil, nil, nil]] byte(--[[---@type string]] ucode, 1, 5)\n\t\t\tucode = f_str_hextbl[c1-47] * 0x1000 +\n\t\t\t        f_str_hextbl[c2-47] * 0x100 +\n\t\t\t        f_str_hextbl[c3-47] * 0x10 +\n\t\t\t        f_str_hextbl[c4-47]\n\t\t\tif ucode ~= inf then\n\t\t\t\tif ucode < 0x80 then  -- 1byte\n\t\t\t\t\tif rest then\n\t\t\t\t\t\treturn char(ucode, rest)\n\t\t\t\t\tend\n\t\t\t\t\treturn char(ucode)\n\t\t\t\telseif ucode < 0x800 then  -- 2bytes\n\t\t\t\t\tc1 = floor(ucode / 0x40)\n\t\t\t\t\tc2 = ucode - c1 * 0x40\n\t\t\t\t\tc1 = c1 + 0xC0\n\t\t\t\t\tc2 = c2 + 0x80\n\t\t\t\t\tif rest then\n\t\t\t\t\t\treturn char(c1, c2, rest)\n\t\t\t\t\tend\n\t\t\t\t\treturn char(c1, c2)\n\t\t\t\telseif ucode < 0xD800 or 0xE000 <= ucode then  -- 3bytes\n\t\t\t\t\tc1 = floor(ucode / 0x1000)\n\t\t\t\t\tucode = ucode - c1 * 0x1000\n\t\t\t\t\tc2 = floor(ucode / 0x40)\n\t\t\t\t\tc3 = ucode - c2 * 0x40\n\t\t\t\t\tc1 = c1 + 0xE0\n\t\t\t\t\tc2 = c2 + 0x80\n\t\t\t\t\tc3 = c3 + 0x80\n\t\t\t\t\tif rest then\n\t\t\t\t\t\treturn char(c1, c2, c3, rest)\n\t\t\t\t\tend\n\t\t\t\t\treturn char(c1, c2, c3)\n\t\t\t\telseif 0xD800 <= ucode and ucode < 0xDC00 then  -- surrogate pair 1st\n\t\t\t\t\tif f_str_surrogate_prev == 0 then\n\t\t\t\t\t\tf_str_surrogate_prev = ucode\n\t\t\t\t\t\tif not rest then\n\t\t\t\t\t\t\treturn ''\n\t\t\t\t\t\tend\n\t\t\t\t\t\tsurrogate_first_error()\n\t\t\t\t\tend\n\t\t\t\t\tf_str_surrogate_prev = 0\n\t\t\t\t\tsurrogate_first_error()\n\t\t\t\telse  -- surrogate pair 2nd\n\t\t\t\t\tif f_str_surrogate_prev ~= 0 then\n\t\t\t\t\t\tucode = 0x10000 +\n\t\t\t\t\t\t        (f_str_surrogate_prev - 0xD800) * 0x400 +\n\t\t\t\t\t\t        (ucode - 0xDC00)\n\t\t\t\t\t\tf_str_surrogate_prev = 0\n\t\t\t\t\t\tc1 = floor(ucode / 0x40000)\n\t\t\t\t\t\tucode = ucode - c1 * 0x40000\n\t\t\t\t\t\tc2 = floor(ucode / 0x1000)\n\t\t\t\t\t\tucode = ucode - c2 * 0x1000\n\t\t\t\t\t\tc3 = floor(ucode / 0x40)\n\t\t\t\t\t\tc4 = ucode - c3 * 0x40\n\t\t\t\t\t\tc1 = c1 + 0xF0\n\t\t\t\t\t\tc2 = c2 + 0x80\n\t\t\t\t\t\tc3 = c3 + 0x80\n\t\t\t\t\t\tc4 = c4 + 0x80\n\t\t\t\t\t\tif rest then\n\t\t\t\t\t\t\treturn char(c1, c2, c3, c4, rest)\n\t\t\t\t\t\tend\n\t\t\t\t\t\treturn char(c1, c2, c3, c4)\n\t\t\t\t\tend\n\t\t\t\t\tparse_error(\"2nd surrogate pair byte appeared without 1st\")\n\t\t\t\tend\n\t\t\tend\n\t\t\tparse_error(\"invalid unicode codepoint literal\")\n\t\tend\n\t\tif f_str_surrogate_prev ~= 0 then\n\t\t\tf_str_surrogate_prev = 0\n\t\t\tsurrogate_first_error()\n\t\tend\n\t\treturn f_str_escapetbl[--[[---@not 'u']] ch] .. ucode\n\tend\n\n\tlocal function f_str(iskey)\n\t\tlocal pos2 = pos\n\t\t---@type number\n\t\tlocal newpos\n\t\tlocal str = ''\n\t\t---@type nil | true\n\t\tlocal bs\n\t\twhile true do\n\t\t\twhile true do  -- search '\\' or '\"'\n\t\t\t\tnewpos = --[[---@not nil]] find(json, '[\\\\\"]', pos2)\n\t\t\t\tif newpos then\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tstr = str .. sub(json, pos, jsonlen)\n\t\t\t\tif pos2 == jsonlen+2 then\n\t\t\t\t\tpos2 = 2\n\t\t\t\telse\n\t\t\t\t\tpos2 = 1\n\t\t\t\tend\n\t\t\t\tjsonnxt()\n\t\t\t\tif jsonlen == 0 then\n\t\t\t\t\tparse_error(\"unterminated string\")\n\t\t\t\tend\n\t\t\tend\n\t\t\tif byte(json, newpos) == 0x22 then  -- break if '\"'\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tpos2 = newpos+2  -- skip '\\<char>'\n\t\t\tbs = true  -- mark the existence of a backslash\n\t\tend\n\t\tstr = str .. sub(json, pos, newpos-1)\n\t\tpos = newpos+1\n\n\t\tif find(str, f_str_ctrl_pat) then\n\t\t\tparse_error(\"unescaped control string\")\n\t\tend\n\t\tif bs then  -- a backslash exists\n\t\t\t-- We need to grab 4 characters after the escape char,\n\t\t\t-- for encoding unicode codepoint to UTF-8.\n\t\t\t-- As we need to ensure that every first surrogate pair byte is\n\t\t\t-- immediately followed by second one, we grab upto 5 characters and\n\t\t\t-- check the last for this purpose.\n\t\t\tstr = gsub(str, '\\\\(.)([^\\\\]?[^\\\\]?[^\\\\]?[^\\\\]?[^\\\\]?)', f_str_subst)\n\t\t\tif f_str_surrogate_prev ~= 0 then\n\t\t\t\tf_str_surrogate_prev = 0\n\t\t\t\tparse_error(\"1st surrogate pair byte not continued by 2nd\")\n\t\t\tend\n\t\tend\n\n\t\tif iskey then\n\t\t\tsax_key(str)\n\t\telse\n\t\t\tsax_string(str)\n\t\tend\n\tend\n\n\t--[[\n\t\tArrays, Objects\n\t--]]\n\t-- arrays\n\tlocal function f_ary()\n\t\trec_depth = rec_depth + 1\n\t\tif rec_depth > 1000 then\n\t\t\tparse_error('too deeply nested json (> 1000)')\n\t\tend\n\t\tsax_startarray()\n\n\t\tspaces()\n\t\tif byte(json, pos) == 0x5D then  -- check closing bracket ']' which means the array empty\n\t\t\tpos = pos+1\n\t\telse\n\t\t\t---@type number\n\t\t\tlocal newpos\n\t\t\twhile true do\n\t\t\t\tf = dispatcher[--[[---@not nil]] byte(json, pos)]  -- parse value\n\t\t\t\tpos = pos+1\n\t\t\t\tf()\n\t\t\t\tnewpos = --[[---@type number]] match(json, '^[ \\n\\r\\t]*,[ \\n\\r\\t]*()', pos)  -- check comma\n\t\t\t\tif newpos then\n\t\t\t\t\tpos = newpos\n\t\t\t\telse\n\t\t\t\t\tnewpos = --[[---@type number]] match(json, '^[ \\n\\r\\t]*%]()', pos)  -- check closing bracket\n\t\t\t\t\tif newpos then\n\t\t\t\t\t\tpos = newpos\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\t\tspaces()  -- since the current chunk can be ended, skip spaces toward following chunks\n\t\t\t\t\tlocal c = byte(json, pos)\n\t\t\t\t\tpos = pos+1\n\t\t\t\t\tif c == 0x2C then  -- check comma again\n\t\t\t\t\t\tspaces()\n\t\t\t\t\telseif c == 0x5D then  -- check closing bracket again\n\t\t\t\t\t\tbreak\n\t\t\t\t\telse\n\t\t\t\t\t\tparse_error(\"no closing bracket of an array\")\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tif pos > jsonlen then\n\t\t\t\t\tspaces()\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\n\t\trec_depth = rec_depth - 1\n\t\tsax_endarray()\n\tend\n\n\t-- objects\n\tlocal function f_obj()\n\t\trec_depth = rec_depth + 1\n\t\tif rec_depth > 1000 then\n\t\t\tparse_error('too deeply nested json (> 1000)')\n\t\tend\n\t\tsax_startobject()\n\n\t\tspaces()\n\t\tif byte(json, pos) == 0x7D then  -- check closing bracket '}' which means the object empty\n\t\t\tpos = pos+1\n\t\telse\n\t\t\t---@type number\n\t\t\tlocal newpos\n\t\t\twhile true do\n\t\t\t\tif byte(json, pos) ~= 0x22 then\n\t\t\t\t\tparse_error(\"not key\")\n\t\t\t\tend\n\t\t\t\tpos = pos+1\n\t\t\t\tf_str(true)  -- parse key\n\t\t\t\tnewpos = --[[---@type number]] match(json, '^[ \\n\\r\\t]*:[ \\n\\r\\t]*()', pos)  -- check colon\n\t\t\t\tif newpos then\n\t\t\t\t\tpos = newpos\n\t\t\t\telse\n\t\t\t\t\tspaces()  -- read spaces through chunks\n\t\t\t\t\tif byte(json, pos) ~= 0x3A then  -- check colon again\n\t\t\t\t\t\tparse_error(\"no colon after a key\")\n\t\t\t\t\tend\n\t\t\t\t\tpos = pos+1\n\t\t\t\t\tspaces()\n\t\t\t\tend\n\t\t\t\tif pos > jsonlen then\n\t\t\t\t\tspaces()\n\t\t\t\tend\n\t\t\t\tf = dispatcher[--[[---@not nil]] byte(json, pos)]\n\t\t\t\tpos = pos+1\n\t\t\t\tf()  -- parse value\n\t\t\t\tnewpos = --[[---@type number]] match(json, '^[ \\n\\r\\t]*,[ \\n\\r\\t]*()', pos)  -- check comma\n\t\t\t\tif newpos then\n\t\t\t\t\tpos = newpos\n\t\t\t\telse\n\t\t\t\t\tnewpos = --[[---@type number]] match(json, '^[ \\n\\r\\t]*}()', pos)  -- check closing bracket\n\t\t\t\t\tif newpos then\n\t\t\t\t\t\tpos = newpos\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\t\tspaces()  -- read spaces through chunks\n\t\t\t\t\tlocal c = byte(json, pos)\n\t\t\t\t\tpos = pos+1\n\t\t\t\t\tif c == 0x2C then  -- check comma again\n\t\t\t\t\t\tspaces()\n\t\t\t\t\telseif c == 0x7D then  -- check closing bracket again\n\t\t\t\t\t\tbreak\n\t\t\t\t\telse\n\t\t\t\t\t\tparse_error(\"no closing bracket of an object\")\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tif pos > jsonlen then\n\t\t\t\t\tspaces()\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\n\t\trec_depth = rec_depth - 1\n\t\tsax_endobject()\n\tend\n\n\t--[[\n\t\tThe jump table to dispatch a parser for a value,\n\t\tindexed by the code of the value's first char.\n\t\tKey should be non-nil.\n\t--]]\n\tdispatcher = --[[---@type {[number]: fun(): void}]] { [0] =\n\t\tf_err, f_err, f_err, f_err, f_err, f_err, f_err, f_err,\n\t\tf_err, f_err, f_err, f_err, f_err, f_err, f_err, f_err,\n\t\tf_err, f_err, f_err, f_err, f_err, f_err, f_err, f_err,\n\t\tf_err, f_err, f_err, f_err, f_err, f_err, f_err, f_err,\n\t\tf_err, f_err, f_str, f_err, f_err, f_err, f_err, f_err,\n\t\tf_err, f_err, f_err, f_err, f_err, f_mns, f_err, f_err,\n\t\tf_zro, f_num, f_num, f_num, f_num, f_num, f_num, f_num,\n\t\tf_num, f_num, f_err, f_err, f_err, f_err, f_err, f_err,\n\t\tf_err, f_err, f_err, f_err, f_err, f_err, f_err, f_err,\n\t\tf_err, f_err, f_err, f_err, f_err, f_err, f_err, f_err,\n\t\tf_err, f_err, f_err, f_err, f_err, f_err, f_err, f_err,\n\t\tf_err, f_err, f_err, f_ary, f_err, f_err, f_err, f_err,\n\t\tf_err, f_err, f_err, f_err, f_err, f_err, f_fls, f_err,\n\t\tf_err, f_err, f_err, f_err, f_err, f_err, f_nul, f_err,\n\t\tf_err, f_err, f_err, f_err, f_tru, f_err, f_err, f_err,\n\t\tf_err, f_err, f_err, f_obj, f_err, f_err, f_err, f_err,\n\t}\n\n\t--[[\n\t\tpublic funcitons\n\t--]]\n\tlocal function run()\n\t\trec_depth = 0\n\t\tspaces()\n\t\tf = dispatcher[--[[---@not nil]] byte(json, pos)]\n\t\tpos = pos+1\n\t\tf()\n\tend\n\n\t---@param n number\n\t---@return string\n\tlocal function read(n)\n\t\tif n < 0 then\n\t\t\terror(\"the argument must be non-negative\")\n\t\tend\n\t\tlocal pos2 = (pos-1) + n\n\t\tlocal str = sub(json, pos, pos2)\n\t\twhile pos2 > jsonlen and jsonlen ~= 0 do\n\t\t\tjsonnxt()\n\t\t\tpos2 = pos2 - (jsonlen - (pos-1))\n\t\t\tstr = str .. sub(json, pos, pos2)\n\t\tend\n\t\tif jsonlen ~= 0 then\n\t\t\tpos = pos2+1\n\t\tend\n\t\treturn str\n\tend\n\n\tlocal function tellpos()\n\t\treturn acc + pos\n\tend\n\n\treturn --[[---@type lunajson__SaxParser]] {\n\t\trun = run,\n\t\ttryc = tryc,\n\t\tread = read,\n\t\ttellpos = tellpos,\n\t}\nend\n\nreturn {\n\tnewparser = newparser\n}\n\nend)\n__bundle_register(\"ge_tts.lunajson.encoder\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal error = error\nlocal byte, find, format, gsub, match = string.byte, string.find, string.format,  string.gsub, string.match\nlocal concat = table.concat\nlocal tostring = tostring\nlocal rawget, pairs, type = rawget, pairs, type\nlocal setmetatable = setmetatable\nlocal huge, tiny = 1/0, -1/0\n\nlocal f_string_esc_pat = '[^ -!#-[%]^-\\255]'\nlocal _ENV = nil\n\n\nlocal function newencoder()\n\t---@type any, any\n\tlocal v, nullv\n\n\t---@type number, string[], table<table, true>\n\tlocal i, builder, visited\n\n\t---@param v any\n\tlocal function f_tostring(v)\n\t\tbuilder[i] = tostring(v)\n\t\ti = i+1\n\tend\n\n\tlocal radixmark = --[[---@type nil | string]] match(tostring(0.5), '[^0-9]')\n\tlocal delimmark = --[[---@type string]] match(tostring(12345.12345), '[^0-9' .. radixmark .. ']')\n\tif radixmark == '.' then\n\t\tradixmark = nil\n\tend\n\n\t---@type nil | true\n\tlocal radixordelim\n\tif radixmark or delimmark then\n\t\tradixordelim = true\n\t\tif radixmark and find(--[[---@not nil]] radixmark, '%W') then\n\t\t\tradixmark = '%' .. radixmark\n\t\tend\n\t\tif delimmark and find(delimmark, '%W') then\n\t\t\tdelimmark = '%' .. delimmark\n\t\tend\n\tend\n\n\tlocal f_number = function(n)\n\t\tif tiny < n and n < huge then\n\t\t\tlocal s = format(\"%.17g\", n)\n\t\t\tif radixordelim then\n\t\t\t\tif delimmark then\n\t\t\t\t\ts = gsub(s, delimmark, '')\n\t\t\t\tend\n\t\t\t\tif radixmark then\n\t\t\t\t\ts = gsub(s, --[[---@not nil]] radixmark, '.')\n\t\t\t\tend\n\t\t\tend\n\t\t\tbuilder[i] = s\n\t\t\ti = i+1\n\t\t\treturn\n\t\tend\n\t\terror('invalid number')\n\tend\n\n\t---@type fun(v: any): void\n\tlocal doencode\n\n\tlocal f_string_subst = {\n\t\t['\"'] = '\\\\\"',\n\t\t['\\\\'] = '\\\\\\\\',\n\t\t['\\b'] = '\\\\b',\n\t\t['\\f'] = '\\\\f',\n\t\t['\\n'] = '\\\\n',\n\t\t['\\r'] = '\\\\r',\n\t\t['\\t'] = '\\\\t',\n\t\t__index = function(_, c)\n\t\t\treturn format('\\\\u00%02X', byte(c))\n\t\tend\n\t}\n\tsetmetatable(f_string_subst, f_string_subst)\n\n\t---@param s string\n\tlocal function f_string(s)\n\t\tbuilder[i] = '\"'\n\t\tif find(s, f_string_esc_pat) then\n\t\t\ts = gsub(s, f_string_esc_pat, f_string_subst)\n\t\tend\n\t\tbuilder[i+1] = s\n\t\tbuilder[i+2] = '\"'\n\t\ti = i+3\n\tend\n\n\t---@param o table\n\tlocal function f_table(o)\n\t\tif visited[o] then\n\t\t\terror(\"loop detected\")\n\t\tend\n\t\tvisited[o] = true\n\n\t\tlocal tmp = o.n\n\t\tif type(tmp) == 'number' then -- arraylen available\n\t\t\tbuilder[i] = '['\n\t\t\ti = i+1\n\t\t\tfor j = 1, tmp do\n\t\t\t\tdoencode(o[j])\n\t\t\t\tbuilder[i] = ','\n\t\t\t\ti = i+1\n\t\t\tend\n\t\t\tif tmp > 0 then\n\t\t\t\ti = i-1\n\t\t\tend\n\t\t\tbuilder[i] = ']'\n\n\t\telse\n\t\t\ttmp = rawget(o, 1)\n\t\t\tif tmp ~= nil then -- detected as array\n\t\t\t\tbuilder[i] = '['\n\t\t\t\ti = i+1\n\t\t\t\tlocal j = 2\n\t\t\t\trepeat\n\t\t\t\t\tdoencode(tmp)\n\t\t\t\t\ttmp = o[j]\n\t\t\t\t\tif tmp == nil then\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\t\tj = j+1\n\t\t\t\t\tbuilder[i] = ','\n\t\t\t\t\ti = i+1\n\t\t\t\tuntil false\n\t\t\t\tbuilder[i] = ']'\n\n\t\t\telse -- detected as object\n\t\t\t\tbuilder[i] = '{'\n\t\t\t\ti = i+1\n\t\t\t\tlocal tmp = i\n\t\t\t\tfor k, v in pairs(o) do\n\t\t\t\t\tif type(k) ~= 'string' then\n\t\t\t\t\t\terror('non-string key: ' .. tostring(k) .. ' (' .. type(k) .. ')')\n\t\t\t\t\tend\n\t\t\t\t\tf_string(k)\n\t\t\t\t\tbuilder[i] = ':'\n\t\t\t\t\ti = i+1\n\t\t\t\t\tdoencode(v)\n\t\t\t\t\tbuilder[i] = ','\n\t\t\t\t\ti = i+1\n\t\t\t\tend\n\t\t\t\tif i > tmp then\n\t\t\t\t\ti = i-1\n\t\t\t\tend\n\t\t\t\tbuilder[i] = '}'\n\t\t\tend\n\t\tend\n\n\t\ti = i+1\n\t\tvisited[o] = nil\n\tend\n\n\tlocal dispatcher = {\n\t\tboolean = f_tostring,\n\t\tnumber = f_number,\n\t\tstring = f_string,\n\t\ttable = f_table,\n\t\t__index = function()\n\t\t\terror(\"invalid type value\")\n\t\tend\n\t}\n\tsetmetatable(dispatcher, dispatcher)\n\n\tfunction doencode(v)\n\t\tif v == nullv then\n\t\t\tbuilder[i] = 'null'\n\t\t\ti = i+1\n\t\t\treturn\n\t\tend\n\t\treturn dispatcher[--[[---@not 'nil' | 'function' | 'thread' | 'userdata']] type(v)](v)\n\tend\n\n\tlocal function encode(v_, nullv_)\n\t\tv, nullv = v_, nullv_\n\t\ti, builder, visited = 1, {}, {}\n\n\t\tdoencode(v)\n\t\treturn concat(builder)\n\tend\n\n\treturn encode\nend\n\nreturn newencoder\n\nend)\n__bundle_register(\"ge_tts.lunajson.decoder\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal setmetatable, tonumber, tostring =\n      setmetatable, tonumber, tostring\nlocal floor, inf =\n      math.floor, math.huge\nlocal byte, char, find, gsub, match, sub =\n      string.byte, string.char, string.find, string.gsub, string.match, string.sub\n\nlocal function _decode_error(pos, errmsg)\n\terror(\"parse error at \" .. pos .. \": \" .. errmsg, 2)\nend\n\nlocal f_str_ctrl_pat = '[^\\32-\\255]'\nlocal _ENV = nil\n\n\nlocal function newdecoder()\n\t---@type string, number, any, boolean, number\n\tlocal json, pos, nullv, arraylen, rec_depth\n\n\t-- `f` is the temporary for dispatcher[c] and\n\t-- the dummy for the first return value of `find`\n\t---@type {[number]: fun(): void}, fun(): any\n\tlocal dispatcher, f\n\n\t--[[\n\t\tHelper\n\t--]]\n\tlocal function decode_error(errmsg)\n\t\treturn _decode_error(pos, errmsg)\n\tend\n\n\t--[[\n\t\tInvalid\n\t--]]\n\tlocal function f_err()\n\t\tdecode_error('invalid value')\n\tend\n\n\t--[[\n\t\tConstants\n\t--]]\n\t-- null\n\tlocal function f_nul()\n\t\tif sub(json, pos, pos+2) == 'ull' then\n\t\t\tpos = pos+3\n\t\t\treturn nullv\n\t\tend\n\t\tdecode_error('invalid value')\n\tend\n\n\t-- false\n\tlocal function f_fls()\n\t\tif sub(json, pos, pos+3) == 'alse' then\n\t\t\tpos = pos+4\n\t\t\treturn false\n\t\tend\n\t\tdecode_error('invalid value')\n\tend\n\n\t-- true\n\tlocal function f_tru()\n\t\tif sub(json, pos, pos+2) == 'rue' then\n\t\t\tpos = pos+3\n\t\t\treturn true\n\t\tend\n\t\tdecode_error('invalid value')\n\tend\n\n\t--[[\n\t\tNumbers\n\t\tConceptually, the longest prefix that matches to `[-+.0-9A-Za-z]+` (in regexp)\n\t\tis captured as a number and its conformance to the JSON spec is checked.\n\t--]]\n\t-- deal with non-standard locales\n\tlocal radixmark = --[[---@type string]] match(tostring(0.5), '[^0-9]')\n\tlocal fixedtonumber = tonumber\n\tif radixmark ~= '.' then\n\t\tif find(radixmark, '%W') then\n\t\t\tradixmark = '%' .. radixmark\n\t\tend\n\t\tfixedtonumber = function(s)\n\t\t\treturn tonumber((gsub(s, '.', radixmark)))\n\t\tend\n\tend\n\n\tlocal function number_error()\n\t\treturn decode_error('invalid number')\n\tend\n\n\t-- `0(\\.[0-9]*)?([eE][+-]?[0-9]*)?`\n\tlocal function f_zro(mns)\n\t\t---@type string, string | number\n\t\tlocal num, c = --[[---@type string, string]] match(json, '^(%.?[0-9]*)([-+.A-Za-z]?)', pos)  -- skipping 0\n\n\t\tif num == '' then\n\t\t\tif c == '' then\n\t\t\t\tif mns then\n\t\t\t\t\treturn -0.0\n\t\t\t\tend\n\t\t\t\treturn 0\n\t\t\tend\n\n\t\t\tif c == 'e' or c == 'E' then\n\t\t\t\tnum, c = --[[---@type string, string]] match(json, '^([^eE]*[eE][-+]?[0-9]+)([-+.A-Za-z]?)', pos)\n\t\t\t\tif c == '' then\n\t\t\t\t\tpos = pos + #num\n\t\t\t\t\tif mns then\n\t\t\t\t\t\treturn -0.0\n\t\t\t\t\tend\n\t\t\t\t\treturn 0.0\n\t\t\t\tend\n\t\t\tend\n\t\t\tnumber_error()\n\t\tend\n\n\t\tif byte(num) ~= 0x2E or byte(num, -1) == 0x2E then\n\t\t\tnumber_error()\n\t\tend\n\n\t\tif c ~= '' then\n\t\t\tif c == 'e' or c == 'E' then\n\t\t\t\tnum, c = --[[---@type string, string]] match(json, '^([^eE]*[eE][-+]?[0-9]+)([-+.A-Za-z]?)', pos)\n\t\t\tend\n\t\t\tif c ~= '' then\n\t\t\t\tnumber_error()\n\t\t\tend\n\t\tend\n\n\t\tpos = pos + #num\n\t\tc = --[[---@not nil]] fixedtonumber(num)\n\n\t\tif mns then\n\t\t\tc = -c\n\t\tend\n\t\treturn c\n\tend\n\n\t-- `[1-9][0-9]*(\\.[0-9]*)?([eE][+-]?[0-9]*)?`\n\tlocal function f_num(mns)\n\t\tpos = pos-1\n\n\t\t---@type string, string | number\n\t\tlocal num, c = --[[---@type string, string]] match(json, '^([0-9]+%.?[0-9]*)([-+.A-Za-z]?)', pos)\n\t\tif byte(num, -1) == 0x2E then  -- error if ended with period\n\t\t\tnumber_error()\n\t\tend\n\n\t\tif c ~= '' then\n\t\t\tif c ~= 'e' and c ~= 'E' then\n\t\t\t\tnumber_error()\n\t\t\tend\n\t\t\tnum, c = --[[---@type string, string]] match(json, '^([^eE]*[eE][-+]?[0-9]+)([-+.A-Za-z]?)', pos)\n\t\t\tif not num or c ~= '' then\n\t\t\t\tnumber_error()\n\t\t\tend\n\t\tend\n\n\t\tpos = pos + #num\n\t\tc = --[[---@not nil]] fixedtonumber(num)\n\n\t\tif mns then\n\t\t\tc = -c\n\t\tend\n\t\treturn c\n\tend\n\n\t-- skip minus sign\n\tlocal function f_mns()\n\t\tlocal c = byte(json, pos)\n\t\tif c then\n\t\t\tpos = pos+1\n\t\t\tif c > 0x30 then\n\t\t\t\tif c < 0x3A then\n\t\t\t\t\treturn f_num(true)\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif c > 0x2F then\n\t\t\t\t\treturn f_zro(true)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tdecode_error('invalid number')\n\tend\n\n\t--[[\n\t\tStrings\n\t--]]\n\tlocal f_str_hextbl = --[[---@type {[number]: number, __index: fun(): number}]] {\n\t\t0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7,\n\t\t0x8, 0x9, inf, inf, inf, inf, inf, inf,\n\t\tinf, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF, inf,\n\t\tinf, inf, inf, inf, inf, inf, inf, inf,\n\t\tinf, inf, inf, inf, inf, inf, inf, inf,\n\t\tinf, inf, inf, inf, inf, inf, inf, inf,\n\t\tinf, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF,\n\t\t__index = function()\n\t\t\treturn inf\n\t\tend\n\t}\n\tsetmetatable(f_str_hextbl, f_str_hextbl)\n\n\tlocal f_str_escapetbl = {\n\t\t['\"']  = '\"',\n\t\t['\\\\'] = '\\\\',\n\t\t['/']  = '/',\n\t\t['b']  = '\\b',\n\t\t['f']  = '\\f',\n\t\t['n']  = '\\n',\n\t\t['r']  = '\\r',\n\t\t['t']  = '\\t',\n\t\t__index = function()\n\t\t\tdecode_error(\"invalid escape sequence\")\n\t\tend\n\t}\n\tsetmetatable(f_str_escapetbl, f_str_escapetbl)\n\n\tlocal function surrogate_first_error()\n\t\treturn decode_error(\"1st surrogate pair byte not continued by 2nd\")\n\tend\n\n\tlocal f_str_surrogate_prev = 0\n\n\t---@overload fun(ch: string, ucode: string): string\n\t---@param ch '\"' | '\\\\' | '/' | 'b' | 'f' | 'n' | 'r' | 't' | 'u'\n\t---@param ucode number\n\t---@return string\n\tlocal function f_str_subst(ch, ucode)\n\t\tif ch == 'u' then\n\t\t\tlocal c1, c2, c3, c4, rest = --[[---@not nil, nil, nil, nil]] byte(--[[---@type string]] ucode, 1, 5)\n\t\t\tucode = f_str_hextbl[c1-47] * 0x1000 +\n\t\t\t        f_str_hextbl[c2-47] * 0x100 +\n\t\t\t        f_str_hextbl[c3-47] * 0x10 +\n\t\t\t        f_str_hextbl[c4-47]\n\t\t\tif ucode ~= inf then\n\t\t\t\tif ucode < 0x80 then  -- 1byte\n\t\t\t\t\tif rest then\n\t\t\t\t\t\treturn char(ucode, rest)\n\t\t\t\t\tend\n\t\t\t\t\treturn char(ucode)\n\t\t\t\telseif ucode < 0x800 then  -- 2bytes\n\t\t\t\t\tc1 = floor(ucode / 0x40)\n\t\t\t\t\tc2 = ucode - c1 * 0x40\n\t\t\t\t\tc1 = c1 + 0xC0\n\t\t\t\t\tc2 = c2 + 0x80\n\t\t\t\t\tif rest then\n\t\t\t\t\t\treturn char(c1, c2, rest)\n\t\t\t\t\tend\n\t\t\t\t\treturn char(c1, c2)\n\t\t\t\telseif ucode < 0xD800 or 0xE000 <= ucode then  -- 3bytes\n\t\t\t\t\tc1 = floor(ucode / 0x1000)\n\t\t\t\t\tucode = ucode - c1 * 0x1000\n\t\t\t\t\tc2 = floor(ucode / 0x40)\n\t\t\t\t\tc3 = ucode - c2 * 0x40\n\t\t\t\t\tc1 = c1 + 0xE0\n\t\t\t\t\tc2 = c2 + 0x80\n\t\t\t\t\tc3 = c3 + 0x80\n\t\t\t\t\tif rest then\n\t\t\t\t\t\treturn char(c1, c2, c3, rest)\n\t\t\t\t\tend\n\t\t\t\t\treturn char(c1, c2, c3)\n\t\t\t\telseif 0xD800 <= ucode and ucode < 0xDC00 then  -- surrogate pair 1st\n\t\t\t\t\tif f_str_surrogate_prev == 0 then\n\t\t\t\t\t\tf_str_surrogate_prev = ucode\n\t\t\t\t\t\tif not rest then\n\t\t\t\t\t\t\treturn ''\n\t\t\t\t\t\tend\n\t\t\t\t\t\tsurrogate_first_error()\n\t\t\t\t\tend\n\t\t\t\t\tf_str_surrogate_prev = 0\n\t\t\t\t\tsurrogate_first_error()\n\t\t\t\telse  -- surrogate pair 2nd\n\t\t\t\t\tif f_str_surrogate_prev ~= 0 then\n\t\t\t\t\t\tucode = 0x10000 +\n\t\t\t\t\t\t        (f_str_surrogate_prev - 0xD800) * 0x400 +\n\t\t\t\t\t\t        (ucode - 0xDC00)\n\t\t\t\t\t\tf_str_surrogate_prev = 0\n\t\t\t\t\t\tc1 = floor(ucode / 0x40000)\n\t\t\t\t\t\tucode = ucode - c1 * 0x40000\n\t\t\t\t\t\tc2 = floor(ucode / 0x1000)\n\t\t\t\t\t\tucode = ucode - c2 * 0x1000\n\t\t\t\t\t\tc3 = floor(ucode / 0x40)\n\t\t\t\t\t\tc4 = ucode - c3 * 0x40\n\t\t\t\t\t\tc1 = c1 + 0xF0\n\t\t\t\t\t\tc2 = c2 + 0x80\n\t\t\t\t\t\tc3 = c3 + 0x80\n\t\t\t\t\t\tc4 = c4 + 0x80\n\t\t\t\t\t\tif rest then\n\t\t\t\t\t\t\treturn char(c1, c2, c3, c4, rest)\n\t\t\t\t\t\tend\n\t\t\t\t\t\treturn char(c1, c2, c3, c4)\n\t\t\t\t\tend\n\t\t\t\t\tdecode_error(\"2nd surrogate pair byte appeared without 1st\")\n\t\t\t\tend\n\t\t\tend\n\t\t\tdecode_error(\"invalid unicode codepoint literal\")\n\t\tend\n\t\tif f_str_surrogate_prev ~= 0 then\n\t\t\tf_str_surrogate_prev = 0\n\t\t\tsurrogate_first_error()\n\t\tend\n\t\treturn f_str_escapetbl[--[[---@not 'u']] ch] .. ucode\n\tend\n\n\t-- caching interpreted keys for speed\n\tlocal f_str_keycache = --[[---@type {[string]: string}]] setmetatable({}, {__mode=\"v\"})\n\n\tlocal function f_str(iskey)\n\t\tlocal newpos = pos\n\n\t\t---@type number, number, number\n\t\tlocal tmppos, c1, c2\n\t\trepeat\n\t\t\tnewpos = --[[---@type number]] find(json, '\"', newpos, true)  -- search '\"'\n\t\t\tif not newpos then\n\t\t\t\tdecode_error(\"unterminated string\")\n\t\t\tend\n\t\t\ttmppos = newpos-1\n\t\t\tnewpos = newpos+1\n\t\t\tc1, c2 = --[[---@not nil, nil]] byte(json, tmppos-1, tmppos)\n\t\t\tif c2 == 0x5C and c1 == 0x5C then  -- skip preceding '\\\\'s\n\t\t\t\trepeat\n\t\t\t\t\ttmppos = tmppos-2\n\t\t\t\t\tc1, c2 = --[[---@not nil, nil]] byte(json, tmppos-1, tmppos)\n\t\t\t\tuntil c2 ~= 0x5C or c1 ~= 0x5C\n\t\t\t\ttmppos = newpos-2\n\t\t\tend\n\t\tuntil c2 ~= 0x5C  -- leave if '\"' is not preceded by '\\'\n\n\t\tlocal str = sub(json, pos, tmppos)\n\t\tpos = newpos\n\n\t\tif iskey then  -- check key cache\n\t\t\ttmppos = --[[---@type any]] f_str_keycache[str]  -- reuse tmppos for cache key/val\n\t\t\tif tmppos then\n\t\t\t\treturn --[[---@type string]] tmppos\n\t\t\tend\n\t\t\ttmppos = --[[---@type any]] str\n\t\tend\n\n\t\tif find(str, f_str_ctrl_pat) then\n\t\t\tdecode_error(\"unescaped control string\")\n\t\tend\n\t\tif find(str, '\\\\', 1, true) then  -- check whether a backslash exists\n\t\t\t-- We need to grab 4 characters after the escape char,\n\t\t\t-- for encoding unicode codepoint to UTF-8.\n\t\t\t-- As we need to ensure that every first surrogate pair byte is\n\t\t\t-- immediately followed by second one, we grab upto 5 characters and\n\t\t\t-- check the last for this purpose.\n\t\t\tstr = gsub(str, '\\\\(.)([^\\\\]?[^\\\\]?[^\\\\]?[^\\\\]?[^\\\\]?)', f_str_subst)\n\t\t\tif f_str_surrogate_prev ~= 0 then\n\t\t\t\tf_str_surrogate_prev = 0\n\t\t\t\tdecode_error(\"1st surrogate pair byte not continued by 2nd\")\n\t\t\tend\n\t\tend\n\t\tif iskey then  -- commit key cache\n\t\t\tf_str_keycache[--[[---@type string]] tmppos] = str\n\t\tend\n\t\treturn str\n\tend\n\n\t--[[\n\t\tArrays, Objects\n\t--]]\n\t-- array\n\tlocal function f_ary()\n\t\trec_depth = rec_depth + 1\n\t\tif rec_depth > 1000 then\n\t\t\tdecode_error('too deeply nested json (> 1000)')\n\t\tend\n\t\tlocal ary = {}\n\n\t\tpos = --[[---@type number]] match(json, '^[ \\n\\r\\t]*()', pos)\n\n\t\tlocal i = 0\n\t\tif byte(json, pos) == 0x5D then  -- check closing bracket ']' which means the array empty\n\t\t\tpos = pos+1\n\t\telse\n\t\t\tlocal newpos = pos\n\t\t\trepeat\n\t\t\t\ti = i+1\n\t\t\t\tf = dispatcher[--[[---@not nil]] byte(json,newpos)]  -- parse value\n\t\t\t\tpos = newpos+1\n\t\t\t\tary[i] = f()\n\t\t\t\tnewpos = --[[---@type number]] match(json, '^[ \\n\\r\\t]*,[ \\n\\r\\t]*()', pos)  -- check comma\n\t\t\tuntil not newpos\n\n\t\t\tnewpos = --[[---@type number]] match(json, '^[ \\n\\r\\t]*%]()', pos)  -- check closing bracket\n\t\t\tif not newpos then\n\t\t\t\tdecode_error(\"no closing bracket of an array\")\n\t\t\tend\n\t\t\tpos = newpos\n\t\tend\n\n\t\tif arraylen then -- commit the length of the array if `arraylen` is set\n\t\t\tary.n = i\n\t\tend\n\t\trec_depth = rec_depth - 1\n\t\treturn ary\n\tend\n\n\t-- objects\n\tlocal function f_obj()\n\t\trec_depth = rec_depth + 1\n\t\tif rec_depth > 1000 then\n\t\t\tdecode_error('too deeply nested json (> 1000)')\n\t\tend\n\n\t\tlocal obj = --[[---@type {[string]: any}]] {}\n\n\t\tpos = --[[---@type number]] match(json, '^[ \\n\\r\\t]*()', pos)\n\t\tif byte(json, pos) == 0x7D then  -- check closing bracket '}' which means the object empty\n\t\t\tpos = pos+1\n\t\telse\n\t\t\tlocal newpos = pos\n\n\t\t\trepeat\n\t\t\t\tif byte(json, newpos) ~= 0x22 then  -- check '\"'\n\t\t\t\t\tdecode_error(\"not key\")\n\t\t\t\tend\n\t\t\t\tpos = newpos+1\n\t\t\t\tlocal key = f_str(true)  -- parse key\n\n\t\t\t\t-- optimized for compact json\n\t\t\t\t-- c1, c2 == ':', <the first char of the value> or\n\t\t\t\t-- c1, c2, c3 == ':', ' ', <the first char of the value>\n\t\t\t\tf = f_err\n\t\t\t\tlocal c1, c2, c3 = --[[---@not nil, nil, nil]] byte(json, pos, pos+3)\n\t\t\t\tif c1 == 0x3A then\n\t\t\t\t\tif c2 ~= 0x20 then\n\t\t\t\t\t\tf = dispatcher[c2]\n\t\t\t\t\t\tnewpos = pos+2\n\t\t\t\t\telse\n\t\t\t\t\t\tf = dispatcher[c3]\n\t\t\t\t\t\tnewpos = pos+3\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tif f == f_err then  -- read a colon and arbitrary number of spaces\n\t\t\t\t\tnewpos = --[[---@type number]] match(json, '^[ \\n\\r\\t]*:[ \\n\\r\\t]*()', pos)\n\t\t\t\t\tif not newpos then\n\t\t\t\t\t\tdecode_error(\"no colon after a key\")\n\t\t\t\t\tend\n\t\t\t\t\tf = dispatcher[--[[---@not nil]] byte(json, newpos)]\n\t\t\t\t\tnewpos = newpos+1\n\t\t\t\tend\n\t\t\t\tpos = newpos\n\t\t\t\tobj[key] = f()  -- parse value\n\t\t\t\tnewpos = --[[---@type number]] match(json, '^[ \\n\\r\\t]*,[ \\n\\r\\t]*()', pos)\n\t\t\tuntil not newpos\n\n\t\t\tnewpos = --[[---@type number]] match(json, '^[ \\n\\r\\t]*}()', pos)\n\t\t\tif not newpos then\n\t\t\t\tdecode_error(\"no closing bracket of an object\")\n\t\t\tend\n\t\t\tpos = newpos\n\t\tend\n\n\t\trec_depth = rec_depth - 1\n\t\treturn obj\n\tend\n\n\t--[[\n\t\tThe jump table to dispatch a parser for a value,\n\t\tindexed by the code of the value's first char.\n\t\tNil key means the end of json.\n\t--]]\n\tdispatcher = --[[---@type {[number]: fun(): void}]] { [0] =\n\t\tf_err, f_err, f_err, f_err, f_err, f_err, f_err, f_err,\n\t\tf_err, f_err, f_err, f_err, f_err, f_err, f_err, f_err,\n\t\tf_err, f_err, f_err, f_err, f_err, f_err, f_err, f_err,\n\t\tf_err, f_err, f_err, f_err, f_err, f_err, f_err, f_err,\n\t\tf_err, f_err, f_str, f_err, f_err, f_err, f_err, f_err,\n\t\tf_err, f_err, f_err, f_err, f_err, f_mns, f_err, f_err,\n\t\tf_zro, f_num, f_num, f_num, f_num, f_num, f_num, f_num,\n\t\tf_num, f_num, f_err, f_err, f_err, f_err, f_err, f_err,\n\t\tf_err, f_err, f_err, f_err, f_err, f_err, f_err, f_err,\n\t\tf_err, f_err, f_err, f_err, f_err, f_err, f_err, f_err,\n\t\tf_err, f_err, f_err, f_err, f_err, f_err, f_err, f_err,\n\t\tf_err, f_err, f_err, f_ary, f_err, f_err, f_err, f_err,\n\t\tf_err, f_err, f_err, f_err, f_err, f_err, f_fls, f_err,\n\t\tf_err, f_err, f_err, f_err, f_err, f_err, f_nul, f_err,\n\t\tf_err, f_err, f_err, f_err, f_tru, f_err, f_err, f_err,\n\t\tf_err, f_err, f_err, f_obj, f_err, f_err, f_err, f_err,\n\t\t__index = function()\n\t\t\tdecode_error(\"unexpected termination\")\n\t\tend\n\t}\n\tsetmetatable(dispatcher, dispatcher)\n\n\t--[[\n\t\trun decoder\n\t--]]\n\t---@param json_ string\n\t---@param pos_ number\n\t---@param nullv_ any\n\t---@param arraylen_ boolean\n\t---@return any | (any, number)\n\tlocal function decode(json_, pos_, nullv_, arraylen_)\n\t\tjson, pos, nullv, arraylen = json_, pos_, nullv_, arraylen_\n\t\trec_depth = 0\n\n\t\tpos = --[[---@type number]] match(json, '^[ \\n\\r\\t]*()', pos)\n\n\t\tf = dispatcher[--[[---@not nil]] byte(json, pos)]\n\t\tpos = pos+1\n\t\tlocal v = f()\n\n\t\tif pos_ then\n\t\t\treturn v, pos\n\t\telse\n\t\t\tf, pos = --[[---@type any, number]] find(json, '^[ \\n\\r\\t]*', pos)\n\t\t\tif pos ~= #json then\n\t\t\t\tdecode_error('json ended')\n\t\t\tend\n\t\t\treturn v\n\t\tend\n\tend\n\n\treturn decode\nend\n\nreturn newdecoder\n\nend)\n__bundle_register(\"ge_tts.Coroutine\", function(require, _LOADED, __bundle_register, __bundle_modules)\n---@class ge_tts__Coroutine\nlocal Coroutine = {}\n\n---@param co thread\n---@param onError nil | fun(message: string): void\nlocal function resumeWithErrorHandling(co, onError)\n    local result, message = coroutine.resume(co)\n\n    if not result then\n        if onError then\n            (--[[---@not nil]] onError)(message)\n        else\n            error(message)\n        end\n    end\nend\n\n--- Yields from the current coroutine. Resumes once a condition is met or an optional timeout is reached.\n---@overload fun(condition: fun(): boolean): true\n---@overload fun(condition: (fun(): boolean), timeout: number): boolean\n---@param condition fun(): boolean @Return true when the current coroutine should be resumed.\n---@param timeout nil | number @Timeout in seconds (optional).\n---@param onError nil | fun(message: string): void @A handler for any errors raised by the current coroutine after it has been resumed.\n---@return boolean @True if the condition was met, or false if the (optional) timeout was reached.\nfunction Coroutine.yieldCondition(condition, timeout, onError)\n    local co = coroutine.running()\n\n    ---@type nil | boolean\n    local conditionMet\n\n    local resume = function()\n        conditionMet = true\n        resumeWithErrorHandling(co, onError)\n    end\n\n    if timeout then\n        Wait.condition(resume, condition, --[[---@not nil]] timeout, function()\n            conditionMet = false\n            resumeWithErrorHandling(co, onError)\n        end)\n    else\n        Wait.condition(resume, condition)\n    end\n\n    coroutine.yield()\n\n    if conditionMet == nil then\n        error(\"Coroutine.yieldCondition(): attempt to resume before Wait was completed!\")\n    end\n\n    return --[[---@not nil]] conditionMet\nend\n\n--- Yields from the current coroutine, which will later be resumed after the specified number of frames have passed.\n---@overload fun(frames: number): void\n---@param frames number\n---@param onError nil | fun(message: string): void @A handler for any errors raised by the current coroutine after it has been resumed.\nfunction Coroutine.yieldFrames(frames, onError)\n    local co = coroutine.running()\n\n    ---@type boolean\n    local done\n\n    Wait.frames(function()\n        done = true\n        resumeWithErrorHandling(co, onError)\n    end, frames)\n\n    coroutine.yield()\n\n    if not done then\n        error(\"Coroutine.yieldFrames(): attempt to resume before Wait was completed!\")\n    end\nend\n\n--- Yields from the current coroutine, which will later be resumed after the specified number of seconds have passed.\n---@overload fun(seconds: number): void\n---@param seconds number\n---@param onError nil | fun(message: string): void @A handler for any errors raised by the current coroutine after it has been resumed.\nfunction Coroutine.yieldSeconds(seconds, onError)\n    local co = coroutine.running()\n\n    ---@type boolean\n    local done\n\n    Wait.time(function()\n        done = true\n        resumeWithErrorHandling(co, onError)\n    end, seconds)\n\n    coroutine.yield()\n\n    if not done then\n        error(\"Coroutine.yieldSeconds(): attempt to resume before Wait was completed!\")\n    end\nend\n\n--- Creates a co-routine from the specified function, and immediately starts it.\n---@param func fun\n---@return boolean, any...\nfunction Coroutine.start(func)\n    return coroutine.resume(coroutine.create(func))\nend\n\nreturn Coroutine\n\nend)\n__bundle_register(\"ge_tts.GlobalPatches\", function(require, _LOADED, __bundle_register, __bundle_modules)\n-- From time to time there are bugs in TTS' APIs that we're able to fix/patch in a non-intrusive fashion.\n\n-- Lua Color indexing fix, see: https://github.com/Berserk-Games/Tabletop-Simulator-Lua-Classes/pull/1\n\n---@type {__index: fun(c: any, k: any): any}\nlocal colorMetatable = getmetatable(Color)\nlocal originalColorIndex = colorMetatable.__index\n\ncolorMetatable.__index = function(c, k)\n    if type(k) ~= 'string' then\n        return nil\n    end\n\n    return originalColorIndex(c, k)\nend\n\nend)\n__bundle_register(\"ge_tts.EventManager\", function(require, _LOADED, __bundle_register, __bundle_modules)\nlocal TableUtils = require(\"ge_tts.TableUtils\")\nlocal Logger = require(\"ge_tts.Logger\")\n\n---@type table<string, any>\nlocal EVENT_DEFAULT_RETURN_VALUES = {\n    filterObjectEnterContainer = true,\n}\n\n---@type table<string, function[]>\nlocal eventHandlers = {}\n\nlocal globalHandlers = --[[---@type {[string]: nil | function}]] _G\n\n---@param event string\nlocal function listen(event)\n    local previousGlobalHandler = globalHandlers[event]\n\n    ;(--[[---@type table]] _G)[event] = function(...)\n        local handlers = TableUtils.copy(eventHandlers[event]) -- Copied in case we add/remove handlers during a handler callback\n\n        ---@type std__Packed<any>\n        local finalResult = --[[---@type std__Packed<any>]] {n = 0}\n\n        for _, handler in ipairs(handlers) do\n            local result = table.pack(handler(...))\n\n            if result.n > 0 then\n                finalResult = result\n            end\n        end\n\n        if finalResult.n > 0 then\n            return table.unpack(finalResult, 1, finalResult.n)\n        else\n            local defaultValue = EVENT_DEFAULT_RETURN_VALUES[event]\n\n            if defaultValue ~= nil then\n                return defaultValue\n            end\n        end\n    end\n\n    ---@type function[]\n    local handlers = {}\n\n    eventHandlers[event] = handlers\n\n    Logger.log('EventManager now listening for ' .. event, Logger.VERBOSE)\n\n    if previousGlobalHandler then\n        table.insert(handlers, --[[---@not nil]] previousGlobalHandler)\n        Logger.log('Pre-existing global ' .. event .. ' handler preserved as the first handler', Logger.VERBOSE)\n    end\n\n    return handlers\nend\n\nlocal SAVE_MANAGER_EVENTS = {'onSave', 'onLoad'}\n\n---@class ge_tts__EventManager\nlocal EventManager = {}\n\n---@param event string @Event name\n---@param handler function @Function that will be called when the event fires. Parameters vary depending on the event.\nfunction EventManager.addHandler(event, handler)\n    assert(not TableUtils.find(SAVE_MANAGER_EVENTS, event), 'EventManager cannot handle ' .. event .. '. Please use SaveManager instead.')\n\n    local handlers = eventHandlers[event] or listen(event)\n\n    if not TableUtils.find(handlers, handler) then\n        table.insert(handlers, handler)\n    end\nend\n\n---@param event string @Event name\n---@param handler function @A previously registered handler that you wish to remove.\nfunction EventManager.removeHandler(event, handler)\n    assert(not TableUtils.find(SAVE_MANAGER_EVENTS, event), 'EventManager cannot handle ' .. event .. '. Please use SaveManager instead.')\n\n    local handlers = eventHandlers[event]\n    local handlerIndex = handlers and TableUtils.find(handlers, handler)\n\n    if handlerIndex then\n        table.remove(handlers, --[[---@not nil]] handlerIndex)\n    end\nend\n\n---@param event string @Event name\n---@vararg any\nfunction EventManager.triggerEvent(event, ...)\n    local handler = globalHandlers[event]\n\n    if handler then\n        (--[[---@not nil]] handler)(...)\n    end\nend\n\nreturn EventManager\n\nend)\n__bundle_register(\"ge_tts.Base64\", function(require, _LOADED, __bundle_register, __bundle_modules)\n-- Base64 implementation originally based on https://github.com/iskolbin/lbase64 (public domain),\n-- but modified for simplicity, TTS and to work with number[] buffers, rather than strings.\n\nlocal TableUtils = require(\"ge_tts.TableUtils\")\n\n---@class ge_tts__Base64\nlocal Base64 = {}\n\nlocal extract = bit32.extract\n\nlocal PAD_KEY = 64\n\n---@overload fun(char62: string, char63: string): table<number, number>\n---@overload fun(char62: string): table<number, number>\n---@overload fun(): table<number, number>\n---@param char62 string\n---@param char63 string\n---@param charPad string\n---@return table<number, number>\nfunction Base64.encodingMap(char62, char63, charPad)\n    ---@type table<number, number>\n    local encodingTable = {}\n\n    for b64code, char in pairs({\n        [0] = 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\n        'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',\n        'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\n        'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2',\n        '3', '4', '5', '6', '7', '8', '9', char62 or '+', char63 or '/', charPad or '='\n    }) do\n        encodingTable[b64code] = char:byte()\n    end\n\n    return encodingTable\nend\n\n---@overload fun(char62: string, char63: string): table<number, number>\n---@overload fun(char62: string): table<number, number>\n---@overload fun(): table<number, number>\n---@param char62 string\n---@param char63 string\n---@param charPad string\n---@return table<number, number>\nfunction Base64.decodingMap(char62, char63, charPad)\n    return TableUtils.invert(Base64.encodingMap(char62, char63, charPad))\nend\n\nlocal DEFAULT_ENCODING_MAP = Base64.encodingMap()\nlocal DEFAULT_DECODING_MAP = Base64.decodingMap()\n\n---@overload fun(buffer: number[], pad: boolean): string\n---@overload fun(buffer: number[]): string\n---@param buffer number[]\n---@param pad boolean\n---@param map table<number, number>\n---@return string\nfunction Base64.encode(buffer, pad, map)\n    pad = pad == nil or pad\n    map = map or DEFAULT_ENCODING_MAP\n\n    ---@type string[]\n    local components = {}\n    local index = 1\n    local length = #buffer\n    local lastComponentSize = length % 3\n\n    for offset = 1, length - lastComponentSize, 3 do\n        local a, b, c = --[[---@not nil, nil, nil]] table.unpack(buffer, offset, offset + 2)\n        local v = a * 0x10000 + b * 0x100 + c\n\n        components[index] = string.char(map[extract(v, 18, 6)], map[extract(v, 12, 6)], map[extract(v, 6, 6)], map[extract(v, 0, 6)])\n        index = index + 1\n    end\n\n    if lastComponentSize == 2 then\n        local a, b = --[[---@not nil, nil]] table.unpack(buffer, length - 1, length)\n        local v = a * 0x10000 + b * 0x100\n\n        components[index] = string.char(map[extract(v, 18, 6)], map[extract(v, 12, 6)], map[extract(v, 6, 6)]) .. (pad and string.char(map[PAD_KEY]) or '')\n    elseif lastComponentSize == 1 then\n        local v = buffer[length] * 0x10000\n\n        components[index] = string.char(map[extract(v, 18, 6)], map[extract(v, 12, 6)]) .. (pad and string.char(map[PAD_KEY], map[PAD_KEY]) or '')\n    end\n\n    return table.concat(components)\nend\n\n---@overload fun(b64: string): number[]\n---@param b64 string\n---@param map table<number, number>\n---@return number[]\nfunction Base64.decode(b64, map)\n    map = map or DEFAULT_DECODING_MAP\n\n    ---@type number[]\n    local buffer = {}\n    local offset = 1\n\n    local length = #b64\n\n    if map[--[[---@not nil]] b64:sub(-2, -2):byte()] == PAD_KEY then\n        length = length - 2\n    elseif map[--[[---@not nil]] b64:sub(-1, -1):byte()] == PAD_KEY then\n        length = length - 1\n    end\n\n    local lastBlockSize = length % 4\n    local fullBlockEnd = length - lastBlockSize\n\n    for i = 1, fullBlockEnd, 4 do\n        local a, b, c, d = --[[---@not nil, nil, nil, nil]] b64:byte(i, i + 3)\n\n        local v = map[a] * 0x40000 + map[b] * 0x1000 + map[c] * 0x40 + map[d]\n\n        buffer[offset] = extract(v, 16, 8)\n        buffer[offset + 1] = extract(v, 8, 8)\n        buffer[offset + 2] = extract(v, 0, 8)\n\n        offset = offset + 3\n    end\n\n\n    if lastBlockSize == 3 then\n        local a, b, c = --[[---@not nil, nil, nil]] b64:byte(fullBlockEnd + 1, fullBlockEnd + 3)\n        local v = map[a] * 0x40000 + map[b] * 0x1000 + map[c] * 0x40\n\n        buffer[offset] = extract(v, 16, 8)\n        buffer[offset + 1] = extract(v, 8, 8)\n    elseif lastBlockSize == 2 then\n        local a, b = --[[---@not nil, nil]] b64:byte(fullBlockEnd + 1, fullBlockEnd + 2)\n        local v = map[a] * 0x40000 + map[b] * 0x1000\n\n        buffer[offset] = extract(v, 16, 8)\n    end\n\n    return buffer\nend\n\nreturn Base64\n\nend)\n__bundle_register(\"ge_tts/Logger\", function(require, _LOADED, __bundle_register, __bundle_modules)\n---@class ge_tts__Logger\n\n---@class ge_tts__static_Logger\n---@overload fun(): ge_tts__Logger\nlocal Logger = {}\n\nLogger.ERROR = 1\nLogger.WARNING = 2\nLogger.INFO = 3\nLogger.DEBUG = 4\nLogger.VERBOSE = 5\n\n---@alias ge_tts__Logger_LogLevel 1 | 2 | 3 | 4 | 5\n\n---@type table<ge_tts__Logger_LogLevel, string>\nlocal levelPrefixes = {\n    [Logger.ERROR] = 'ERROR: ',\n    [Logger.WARNING] = 'WARNING: ',\n    [Logger.INFO] = '',\n    [Logger.DEBUG] = '',\n    [Logger.VERBOSE] = '',\n}\n\n---@type ge_tts__Logger_LogLevel\nlocal defaultLogLevel = Logger.DEBUG\n\nsetmetatable(Logger, {\n    __call = function()\n        local self = --[[---@type ge_tts__Logger]] {}\n\n        ---@type ge_tts__Logger_LogLevel\n        local filterLevel = Logger.INFO\n\n        ---@return ge_tts__Logger_LogLevel\n        function self.getFilterLevel()\n            return filterLevel\n        end\n\n        ---@param level ge_tts__Logger_LogLevel | `Logger.ERROR` | `Logger.WARNING` | `Logger.INFO` | `Logger.DEBUG` | `Logger.VERBOSE`\n        function self.setFilterLevel(level)\n            filterLevel = level\n        end\n\n        ---@overload fun(message: string): void\n        ---@param message string\n        ---@param level ge_tts__Logger_LogLevel | `Logger.ERROR` | `Logger.WARNING` | `Logger.INFO` | `Logger.DEBUG` | `Logger.VERBOSE`\n        function self.log(message, level)\n            level = level or defaultLogLevel\n            if level <= filterLevel then\n                print(levelPrefixes[level] .. message)\n            end\n        end\n\n        ---\n        ---If value is false, logs message at level Logger.ERROR and then calls Lua's in-built error(message).\n        ---\n        ---@param value any\n        ---@param message string\n        function self.assert(value, message)\n            if not value then\n                self.log(message, Logger.ERROR)\n                error(message, 2)\n            end\n        end\n\n        return self\n    end\n})\n\nlocal defaultLogger = Logger()\n\n---@param logger ge_tts__Logger\nfunction Logger.setDefaultLogger(logger)\n    defaultLogger = logger\nend\n\nfunction Logger.getDefaultLogger()\n    return defaultLogger\nend\n\n---\n---When calling log() without specifying a log level, messages will log at the provided log level.\n---\n---@param level ge_tts__Logger_LogLevel | `Logger.ERROR` | `Logger.WARNING` | `Logger.INFO` | `Logger.DEBUG` | `Logger.VERBOSE`\nfunction Logger.setDefaultLogLevel(level)\n    defaultLogLevel = level\nend\n\n---\n---Returns the default log level.\n---\n---@return ge_tts__Logger_LogLevel\nfunction Logger.getDefaultLogLevel()\n    return defaultLogLevel\nend\n\n---\n---Logs a message at the specified log level. If level is omitted, the default log level will be used.\n---\n---@overload fun(message: string): void\n---@param message string\n---@param level ge_tts__Logger_LogLevel | `Logger.ERROR` | `Logger.WARNING` | `Logger.INFO` | `Logger.DEBUG` | `Logger.VERBOSE`\nfunction Logger.log(message, level)\n    level = level or defaultLogLevel\n    defaultLogger.log(message, level)\nend\n\n---\n---If value is false, logs message at level Logger.ERROR using the default logger, and then calls Lua's error(message).\n---\n---@param value any\n---@param message string\nfunction Logger.assert(value, message)\n    if not value then\n        defaultLogger.log(message, Logger.ERROR)\n        error(message, 2)\n    end\nend\n\nreturn Logger\n\nend)\n__bundle_register(\"ge_tts/TableUtils\", function(require, _LOADED, __bundle_register, __bundle_modules)\n-- This module operates on tables that contain only positive consecutive integer keys starting at 1 (i.e. a plain array), as well as tables which contain no\n-- array component. Behavior is undefined for tables that contain a key for [1] as well as non-consecutive integer or non-integer keys.\n\n---@generic T\n---@param length number\n---@return fun(arr: std__Packed<T>, i: number): nil | (number, T)\nlocal function fixedLengthIterator(length)\n    ---@type fun(arr: std__Packed<T>, i: number): nil | (number, T)\n    return function(arr, i)\n        i = i + 1\n        if i <= length then\n            return i, arr[i]\n        end\n    end\nend\n\n---@overload fun<V, A : std__Packed<V>>(arr: A): (fun(arr: A, i: number): number, V), V[], 0\n---@overload fun<V>(arr: V[]): (fun(arr: V[], i: number): number, V), V[], 0\n---@generic K, V\n---@param tab table<K, V>\n---@return (fun(tab: table<K, V>, k: K): nil | (K, V)), table<K, V>, K\nlocal function iterate(tab)\n    local fixedLength = (--[[---@type std__Packed<any>]] tab).n\n\n    if type(fixedLength) == 'number' and fixedLength >= 0 then\n        return --[[---@type fun(tab: table<K, V>, k: K): nil | (K, V)]] fixedLengthIterator(fixedLength), tab, --[[---@type K]] 0\n    elseif tab[--[[---@type K]] 1] ~= nil then\n        return --[[---@type (fun(tab: table<K, V>, k: K): nil | (K, V)), table<K, V>, K]] ipairs(--[[---@type V[] ]] tab)\n    else\n        return pairs(tab)\n    end\nend\n\n---@class ge_tts__TableUtils\nlocal TableUtils = {}\n\n--- Returns true if TableUtils will interpret the table as an array i.e. if tab[1] ~= nil or\n--- type(tab.n) == 'number'.\n---\n--- If tab is an array, and it's passed to a TableUtils function that iterates over tab calling a callback, the\n--- iteration over keys is guaranteed to take place in sequential order (à la ipairs).\n---\n--- In the case of type(tab.n) == 'number', tab.n will be treated as the length of the array and TableUtils will\n--- continue iterating over \"holes\" (nil values) up to this length.\n---@overload fun<V>(tab: V[]): true\n---@overload fun<V>(tab: std__Packed<V>): true\n---@overload fun<V>(tab: table<boolean, V>): false\n---@overload fun<V>(tab: table<string, V>): false\n---@overload fun<V>(tab: table<table, V>): false\n---@overload fun<V>(tab: table<userdata, V>): false\n---@param tab table\n---@return boolean\nfunction TableUtils.isArray(tab)\n    return tab[1] ~= nil or type((--[[---@type std__Packed<any>]] tab).n) == 'number'\nend\n\n--- Returns the length of arr and a boolean indicating whether arr is a std__Packed<V>.\n---@generic V\n---@param arr V[] | std__Packed<V>\n---@return number, boolean\nfunction TableUtils.arrayLength(arr)\n    local fixedLength = (--[[---@type std__Packed<V>]] arr).n\n    local isFixed = type(fixedLength) == 'number'\n    return isFixed and fixedLength or #arr, isFixed\nend\n\n---@overload fun<V, MappedV>(tab: V[], func: fun(value: V, key: number): MappedV): MappedV[]\n---@generic K, V, MappedV\n---@param tab table<K, V>\n---@param func fun(value: V, key: K): MappedV\n---@return table<K, MappedV>\nfunction TableUtils.map(tab, func)\n    ---@type table<K, MappedV>\n    local mapped = {}\n\n    for k, v in iterate(tab)  do\n        mapped[k] = func(v, k)\n    end\n\n    return mapped\nend\n\n---@generic K, V\n---@param tab table<K, V>\n---@return table<V, K>\nfunction TableUtils.invert(tab)\n    ---@type table<V, K>\n    local inverted = {}\n\n    for k, v in iterate(tab) do\n        if v then\n            inverted[v] = k\n        end\n    end\n\n    return inverted\nend\n\n---@generic K, V, RemappedK\n---@param tab table<K, V>\n---@param func fun(value: V, key: K): RemappedK\n---@return table<RemappedK, V>\nfunction TableUtils.remap(tab, func)\n    ---@type table<RemappedK, V>\n    local remapped = {}\n\n    for k, v in iterate(tab) do\n        remapped[func(v, k)] = v\n    end\n\n    return remapped\nend\n\n---@overload fun<V>(arr: V[], func: fun(value: V, index: number): boolean): V[]\n---@generic K, V\n---@param tab table<K, V>\n---@param func fun(value: V, key: K): any\n---@return table<K, V>\nfunction TableUtils.select(tab, func)\n    ---@type table<K, V>\n    local selected = {}\n\n    if TableUtils.isArray(tab) then\n        local i = 0\n\n        for k, v in iterate(tab) do\n            if func(v, k) then\n                i = i + 1\n                (--[[---@type V[] ]] selected)[i] = v\n            end\n        end\n    else\n        for k, v in pairs(tab) do\n            if func(v, k) then\n                selected[k] = v\n            end\n        end\n    end\n\n    return selected\nend\n\n---@overload fun<V>(arr: V[], func: fun(value: V, index: number): boolean): V[]\n---@generic K, V\n---@param tab table<K, V>\n---@param func fun(value: V, key: K): boolean\n---@return table<K, V>\nfunction TableUtils.reject(tab, func)\n    return TableUtils.select(tab, function(v, k) return not func(v, k) end)\nend\n\n---@overload fun<R, K, V: R>(tab: table<K, V>, func: fun(memo: R, value: V, key: K): R): nil | R\n---@generic K, V, R\n---@param tab table<K, V>\n---@param initial R\n---@param func fun(memo: R, value: V, key: K): R\n---@return R\nfunction TableUtils.reduce(tab, initial, func)\n    local iterator, _, initialK = iterate(tab)\n\n    ---@type R\n    local memo\n\n    ---@type fun(memo: R, value: V, key: K): R\n    local reducer\n\n    if func then\n        memo = initial\n        reducer = func\n    else\n        local control, value = iterator(tab, initialK)\n\n        if control == nil then\n            -- Overload may return nil\n            return --[[---@type any]] nil\n        end\n\n        initialK = --[[---@not nil]] control\n        memo = --[[---@type R]] value\n        reducer = --[[---@type fun(memo: R, value: V, key: K): R]] initial\n    end\n\n    if not func then\n        initialK = --[[---@type K]] memo\n    end\n\n    for k, v in iterator, tab, initialK do\n        memo = reducer(memo, v, k)\n    end\n\n    return memo\nend\n\n---@generic K, V\n---@param tab table<K, V>\n---@param value any\n---@return nil | K\nfunction TableUtils.find(tab, value)\n    for k, v in iterate(tab) do\n        if v == value then\n            return k\n        end\n    end\n\n    return nil\nend\n\n---@generic K, V\n---@param tab table<K, V>\n---@param func fun(value: V, key: K): boolean\n---@return nil | V, nil | K\nfunction TableUtils.detect(tab, func)\n    for k, v in iterate(tab) do\n        if func(v, k) then\n            return v, k\n        end\n    end\n\n    return nil, nil\nend\n\n---@overload fun<T>(tab: T): T\n---@generic T\n---@param tab T\n---@param recursive boolean\n---@return T\nfunction TableUtils.copy(tab, recursive)\n    ---@type table\n    local copied = {}\n\n    for k, v in pairs(--[[---@type table]] tab) do\n        copied[k] = (recursive and type(v) == 'table' and\n            TableUtils.copy(--[[---@type table]] v, true)\n        ) or v\n    end\n\n    return --[[---@type T]] copied\nend\n\n---@overload fun<V>(arr: V[], ...: V[]): void\n---@overload fun<V>(arr: std__Packed<V>, ...: V[] | std__Packed<V>): void\n---@generic K, V\n---@param tab table<K, V>\n---@vararg table<K, V>\n---@return void\nfunction TableUtils.inject(tab, ...)\n    local otherTables = { ... }\n\n    if TableUtils.isArray(tab) then\n        local arr = --[[---@type V[] | std__Packed<V>]] tab\n        local i, isFixed = TableUtils.arrayLength(arr)\n\n        for _, t in ipairs(otherTables) do\n            for _, v in iterate(--[[---@type V[] ]] t) do\n                i = i + 1\n                arr[i] = v\n            end\n        end\n\n        if isFixed then\n            (--[[---@type std__Packed<V>]] tab).n = i\n        end\n    else\n        for _, t in ipairs(otherTables) do\n            for k, v in pairs(t) do\n                tab[k] = v\n            end\n        end\n    end\nend\n\n---@overload fun<T>(...: T): T\n---@vararg table\n---@return table\nfunction TableUtils.merge(...)\n    local merged = {}\n    TableUtils.inject(merged, ...)\n    return merged\nend\n\n---@overload fun<V>(arrays: std__Packed<V>[]): std__Packed<V>, number\n---@generic V\n---@param arrays V[][]\n---@return V[], number\nfunction TableUtils.flatten(arrays)\n    ---@type V[]\n    local flattened = {}\n    local i = 0\n\n    for _, array in ipairs(arrays) do\n        for _, v in iterate(array) do\n            i = i + 1\n            flattened[i] = v\n        end\n    end\n\n\n    if i > 0 and type((--[[---@type std__Packed<V[]>]] arrays[1]).n) == 'number' then\n        (--[[---@type std__Packed<V>]] flattened).n = i\n    end\n\n    return flattened, i\nend\n\n---@generic K, V\n---@param tab table<K, V>\n---@return K[]\nfunction TableUtils.keys(tab)\n    ---@type K[]\n    local keys = {}\n\n    for k, _ in pairs(tab) do\n        table.insert(keys, k)\n    end\n\n    return keys\nend\n\n---@overload fun<V>(arr: std__Packed<V>): std__Packed<V>\n---@generic K, V\n---@param tab table<K, V>\n---@return V[], number\nfunction TableUtils.values(tab)\n    ---@type V[]\n    local values = {}\n    local i = 0\n\n    for _, v in iterate(tab) do\n        i = i + 1\n        values[i] = v\n    end\n\n    if type((--[[---@type std__Packed<V>]] tab).n) == 'number' then\n        (--[[---@type std__Packed<V>]] values).n = i\n    end\n\n    return values, i\nend\n\n---@param tab table\n---@return number\nfunction TableUtils.count(tab)\n    local count = 0\n\n    for _, _ in pairs(tab) do\n        count = count + 1\n    end\n\n    return count\nend\n\n---@overload fun<V>(arr: std__Packed<V>): std__Packed<V>\n---@generic V\n---@param arr V[]\n---@return V[]\nfunction TableUtils.reverse(arr)\n    ---@type V[]\n    local reversed = {}\n\n    local length, isFixed = TableUtils.arrayLength(arr)\n    local j = 1\n\n    for i = length, 1, -1 do\n        reversed[j] = arr[i]\n        j = j + 1\n    end\n\n    if isFixed then\n        (--[[---@type std__Packed<V>]] reversed).n = length\n    end\n\n    return reversed\nend\n\n---@overload fun<V>(arr: std__Packed<V>, start: number): std__Packed<V>\n---@overload fun<V>(arr: V[], start: number): V[]\n---@generic V\n---@param arr V[]\n---@param start number\n---@param finish number\n---@return V[]\nfunction TableUtils.range(arr, start, finish)\n    ---@type V[]\n    local range = {}\n\n    for i in fixedLengthIterator(finish or TableUtils.arrayLength(arr)), arr, start - 1 do\n        range[i - start + 1] = arr[i]\n    end\n\n    if type((--[[---@type std__Packed<V>]] arr).n) == 'number' then\n        (--[[---@type std__Packed<V>]] range).n = finish - start + 1\n    end\n\n    return range\nend\n\n---@overload fun<V>(arr: std__Packed<V>): std__Packed<V>\n---@generic V\n---@param arr V[]\n---@return V[], number\nfunction TableUtils.unique(arr)\n    ---@type V[]\n    local unique = {}\n    local i = 0\n\n    for _, value in ipairs(arr) do\n        if not TableUtils.find(unique, value) then\n            i = i + 1\n            unique[i] = value\n        end\n    end\n\n    return unique, i\nend\n\nlocal TYPE_STRINGIFIERS = {\n    ['nil'] = function(_) return 'nil' end,\n    boolean = function(v) return tostring(v) end,\n    number = function(v) return tostring(v) end,\n    string = function(v) return \"'\" .. v .. \"'\" end,\n    userdata = function(_) return 'userdata' end,\n    ['function'] = function(_) return 'function' end,\n    thread = function(_) return 'thread' end,\n    table = function(v) return tostring(v) end,\n}\n\n---@overload fun(tab: table): string\n---@overload fun(tab: table, recursive: boolean): string\n---@param tab table\n---@param recursive boolean\n---@param depth number\n---@return string\nfunction TableUtils.dump(tab, recursive, depth)\n    depth = depth or 1\n\n    local indentation = string.rep('  ', depth)\n    local str = '{'\n\n    ---@type table<number, nil | boolean>\n    local ordered_keys = {}\n\n    for i, v in ipairs(--[[---@type any[] ]] tab) do\n        ordered_keys[i] = true\n        str = str .. '\\n' .. indentation .. '[' .. i .. '] = '\n\n        if recursive and type(v) == 'table' then\n            str = str .. TableUtils.dump(v, true, depth + 1) .. ','\n        else\n            local a = TYPE_STRINGIFIERS['nil']\n            str = str .. TYPE_STRINGIFIERS[type(v)](v) .. ','\n        end\n    end\n\n    for k, v in pairs(tab) do\n        if not ordered_keys[--[[---@type number]] k] then\n            str = str .. '\\n' .. indentation .. '[' .. TYPE_STRINGIFIERS[type(k)](k) .. '] = '\n\n            if recursive and type(v) == 'table' then\n                str = str .. TableUtils.dump(v, true, depth + 1) .. ','\n            else\n                str = str .. TYPE_STRINGIFIERS[type(v)](v) .. ','\n            end\n        end\n    end\n\n    str = str .. '\\n' .. string.rep('  ', depth - 1) .. '}'\n\n    return str\nend\n\nreturn TableUtils\n\nend)\nreturn __bundle_require(\"Global.-1.lua\")",
  "LuaScriptState": "__ge_tts_save__18 ge_tts.ObjectUtils 20 {\"pendingSpawns\":{}}",
  "XmlUI": "<!-- Xml UI. See documentation: https://api.tabletopsimulator.com/ui/introUI/ -->",
  "VersionNumber": "v12.4.3"
}